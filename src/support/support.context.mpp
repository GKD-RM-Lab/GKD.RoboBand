export module robo:support.context;

import std;
import :support.misc;
import :support.multiton;
namespace stdv = std::views;

export namespace robo {
namespace spt {
namespace detail {
class thread_context_impl : 
    public spt::immovable_base, 
    public spt::not_copyable_base {
public:
    struct info {
        using key_type = unsigned int;
        using owner_type = thread_context_impl;

        const key_type id;
        std::chrono::nanoseconds idle_duration;

        consteval info(
            const key_type id,
            const std::chrono::nanoseconds& idle_duration = std::chrono::nanoseconds::max()) : 
            id { id }, idle_duration { idle_duration } {}
        [[nodiscard]]
        auto key() const { return id; }
        [[nodiscard]]
        auto desc() const { 
            return std::format("thread context (id:{})", id);
        }
    };
    using info_type = info;

private:
    bool started_ { false };
    bool finishing_ { false };
    info info_;
    std::vector<std::function<void()>> tasks_ {};
    std::jthread thread_ { [this] { run(); } };

public:
    thread_context_impl(const info& info) : info_ { info } {}
    ~thread_context_impl() {
        if (not started_) [] { 
            throw std::logic_error{ "you created a context but never started it" }; 
        }();
        finish();
    }

    [[nodiscard]]
    auto info() const -> const info& { return info_; };
    void add_task(
        spt::invocable_r<void> auto&& task, 
        const std::chrono::nanoseconds& idle_duration = std::chrono::nanoseconds::max()) {
        if (started_) {
            throw std::logic_error{ 
                "add a task to the already started thread_context " + std::to_string(info_.id) + "."
            };
        }
        tasks_.emplace_back(std::forward<decltype(task)>(task));
        info_.idle_duration = std::min(info_.idle_duration, idle_duration);
    }
    void start() {
        if (tasks_.size() == 0) {
            throw std::logic_error{ 
                "thread_context " + std::to_string(info_.id) + " has no assigned task."
            };
        }
        if (info_.idle_duration == std::chrono::nanoseconds::max()) {
            throw std::logic_error{ 
                "thread_context " + std::to_string(info_.id) + ": idle duration have not been set.",
            };
        }
        // TODO log
        started_ = true;
    }

private:
    void finish() noexcept { finishing_ = true; }
    void run() noexcept {
        while (not started_ and not finishing_);
        while (not finishing_) {
            for (auto& task : tasks_) {
                task();
            }
            std::this_thread::sleep_for(info_.idle_duration);
        }
    }
};
} // namespace detail

namespace thread_context {
using info = struct detail::thread_context_impl::info;
static_assert(spt::info<info>);

auto& get = spt::multiton::get<info>;

template <std::size_t N> requires (N > 1)
[[nodiscard]]
consteval auto make() -> std::array<info, N> {
    return []<std::size_t... I>(std::index_sequence<I...>) {
        return std::array<info, N>{ info{I}... };
    }(std::make_index_sequence<N>{});
}
[[nodiscard]]
consteval auto make() -> info {
    return info{ 0 };
}

void start() {
    for (auto& e : stdv::values(spt::multiton::instances<info>())) {
        e->start();
    }
}
} // namespace thread_context
} // namespace spt
} // namespace robo

