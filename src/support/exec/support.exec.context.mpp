export module robo:support.exec.context;

import std;
import :support.exec.core;
import :support.exec.concepts;
import :support.exec.misc;

export namespace robo {
namespace spt {
namespace exec {
///////////////////////////////////////////
// run_loop
///////////////////////////////////////////
struct run_loop : detail::immovable {
    struct task : detail::immovable {
        task* next { this };
        virtual void execute() noexcept {}
    };

    // FIFO linked list
    task head_ {};
    task* tail_ { &head_ };

    bool finishing_ { false };
    std::mutex mtx_ {};
    std::condition_variable cv_ {};

    void push_back(task* op) {
        std::unique_lock lk(mtx_);
        op->next = &head_;
        tail_ = tail_->next = op;
        cv_.notify_one();
    }
    task* pop_front() {
        std::unique_lock lk(mtx_);
        cv_.wait(lk, [this] { return (head_.next != &head_) or finishing_; });
        if (head_.next == &head_) {
            return nullptr;
        }
        return std::exchange(head_.next, head_.next->next);
    }
    void finish() {
        std::unique_lock lk(mtx_);
        finishing_ = true;
        cv_.notify_all();
    }

    void run() {
        while (task* op = pop_front()) {
            op->execute();
        }
    }

    struct sender {
        static constexpr auto info = [] {
            using namespace constring_literals;
            return "run_loop_sender"_cs;
        }();

        template <template <typename...> class Tuple, template <typename...> class Variant>
        using value_types = Variant<Tuple<>>;
        template <template <typename...> class Variant>
        using error_types = Variant<std::exception_ptr>;
        // TODO
        static const constexpr bool sends_done { true };

        run_loop& loop_;

        template <receiver R>
        struct operation : task {
            static constexpr auto info = [] {
                using namespace constring_literals;
                return "run_loop_operation<"_cs + spt::typeinfo<R> + ">"_cs;
            }();

            [[no_unique_address]] R rcvr_;
            run_loop& loop_;

            template <typename Rcvr>
            operation(Rcvr&& rcvr, run_loop& loop) :
                rcvr_(std::forward<Rcvr>(rcvr)), loop_(loop) {}

            void execute() noexcept override final {
                try {
                    exec::set_value(std::move(rcvr_));
                } catch (...) {
                    exec::set_error(std::move(rcvr_), std::current_exception());
                }
            }

            void start(operation&) noexcept {
                try {
                    loop_.push_back(this);
                } catch (...) {
                    exec::set_error(std::move(rcvr_), std::current_exception());
                }
            }
        };

        template <exec::receiver R>
        auto connect(const sender&, R&& rcvr) const noexcept
            -> operation<std::remove_cvref_t<R>> {
            return { std::forward<R>(rcvr), loop_ };
        }
    };

    struct scheduler {
        static constexpr auto info = [] {
            using namespace constring_literals;
            return "run_loop_scheduler"_cs;
        }();

        run_loop& loop_;
        auto schedule(scheduler&) noexcept -> sender {
            return { loop_ };
        }
    };

    auto get_scheduler() -> scheduler {
        return { *this };
    }
};

///////////////////////////////////////////
// exec::thread_context context {};
// exec::scheduler auto sched = context.get_scheduler();
///////////////////////////////////////////
class thread_context : run_loop {
    std::jthread th { [this] { run(); } };

public:
    using run_loop::finish;
    using run_loop::get_scheduler;

    ~thread_context() {
        finish();
    }
};
} // namespace exec
} // namespace spt
} // namespace robo

