export module robo:spt.multiton;

import std;
import :spt.misc;

export namespace robo::spt {
///////////////////////////////////////////
// concepts:
//     owner (impl) : info() info_type                     
//     info         : key()  key_type owner_type 
//     multiton     : get()  key_type owner_type info_type
// usage:
//     multiton::get() -> owner
//     owner.info()    -> info
//     info.key()      -> key
//     info.desc()     -> description
///////////////////////////////////////////
template <typename T>
concept info =
    requires(T t) {
        typename T::key_type;
        typename T::owner_type;
        { t.key() } -> std::same_as<typename T::key_type>;
        { t.desc() } -> std::same_as<std::string>;
    };

template <typename T>
concept owner =
    spt::immovable<T> and
    spt::not_copyable<T> and
    info<typename T::info_type> and
    requires(T t) {
        { t.info() } -> std::same_as<const typename T::info_type&>;
    };

namespace detail {
template <info T>
struct multiton_impl {
    using info_type = T;
    using key_type = typename T::key_type;
    using owner_type = typename T::owner_type;
    static_assert(std::same_as<info_type, typename owner_type::info_type>);

    static std::mutex mutex_;
    static std::unordered_map<key_type, std::unique_ptr<owner_type>> instances;

    multiton_impl() = default;
    ~multiton_impl() = default;
    multiton_impl(const multiton_impl&) = delete;
    multiton_impl& operator=(const multiton_impl&) = delete;
    multiton_impl(multiton_impl&&) = delete;
    multiton_impl& operator=(multiton_impl&&) = delete;

    [[nodiscard]]
    static auto get(const info_type& info) -> owner_type& {
        std::lock_guard<std::mutex> lock { mutex_ };
        auto it = instances.find(info.key());
        if (it != instances.end()) {
            return *it->second;
        }

        auto instance = std::make_unique<owner_type>(info);
        owner_type& ret = *instance;
        instances.emplace(info.key(), std::move(instance));
        return ret;
    };
};

template <info T>
std::mutex multiton_impl<T>::mutex_ {};
template <info T>
std::unordered_map<
    typename multiton_impl<T>::key_type, 
    std::unique_ptr<typename multiton_impl<T>::owner_type>
> multiton_impl<T>::instances {};
} // namespace detail

namespace multiton {
[[nodiscard]]
auto& get(const info auto& info) {
    using info_type = std::remove_cvref_t<decltype(info)>;
    return spt::detail::multiton_impl<info_type>::get(info);
};

template <info T>
[[nodiscard]]
auto& instances() {
    using info_type = std::remove_cvref_t<T>;
    return spt::detail::multiton_impl<info_type>::instances;
}
} // namespace multiton
} // namespace robo::spt

