export module robo:support.math;

import std;
namespace stdr = std::ranges;

export namespace robo {
namespace math {
template <typename T>
    requires std::integral<T> or std::floating_point<T>
void abs_limit(T& val, const T limit) {
    val = std::clamp(val, -limit, limit);
}
template <typename T>
    requires std::integral<T> or std::floating_point<T>
[[nodiscard]]
T abs_limited(const T val, const T limit) {
    return std::clamp(val, -limit, limit);
}

template <stdr::input_range R>
void abs_limit(R&& range, const stdr::range_value_t<R> limit) {
    stdr::transform(range, [limit](auto val) { return abs_limited(val, limit); });
}
void abs_limit(stdr::input_range auto&& range, stdr::input_range auto&& limit) {
    static_assert(std::same_as<stdr::range_value_t<decltype(range)>, stdr::range_value_t<decltype(limit)>>);
    if (stdr::size(range) != stdr::size(limit)) throw std::logic_error { 
        "range.size != limit.size" 
    };
    for (auto [val, l] : std::views::zip(range, limit)) { abs_limit(val, l); }
}

template <typename T>
concept spannable =
    not stdr::input_range<T> and
    requires(std::remove_cvref_t<T> t) {
        { t.data() };
        { t.size() } -> std::convertible_to<std::size_t>;
    };
void abs_limit(spannable auto&& val, const decltype(*val.data()) limit) {
    std::span view { val.data(), static_cast<std::size_t>(val.size()) };
    abs_limit(view, limit);
}
void abs_limit(spannable auto&& val, stdr::input_range auto&& limit) {
    std::span view { val.data(), static_cast<std::size_t>(val.size()) };
    abs_limit(view, limit);
}
void abs_limit(spannable auto&& val, spannable auto&& limit) {
    std::span val_view { val.data(), static_cast<std::size_t>(val.size()) };
    std::span limit_view { limit.data(), static_cast<std::size_t>(limit.size()) };
    abs_limit(val_view, limit_view);
}
} // namespace math
} // namespace robo

