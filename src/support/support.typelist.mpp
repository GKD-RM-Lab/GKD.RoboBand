export module robo:support.typelist;

import std;

export namespace robo {
namespace spt {
///////////////////////////////////////////
// typelist
///////////////////////////////////////////
/** typelist<t1, t2, ...>::apply<F> is equivalant to F<t1, t2, ...>.
 *  typelist<t1, t2, ...>::map<F> is equivalant to typelist<F<t1>, F<t2>, ...>. */
template <typename... Ts>
struct typelist {
    template <template <typename...> typename F>
    using apply = F<Ts...>;
    template <template <typename> typename F>
    using map = typelist<F<Ts>...>;
    template <typename T>
    static constexpr bool has = []() static {
        if constexpr (sizeof...(Ts)) {
            return (std::is_same_v<T, Ts> or ...);
        } else {
            return false;
        }
    }();
};
template <typename... Ts>
struct type_count {
    static constexpr int value = sizeof...(Ts);
};

///////////////////////////////////////////
// concat
///////////////////////////////////////////
template <typename... TLs>
struct concat;
template <>
struct concat<> {
    using typelist = typelist<>;
};
template <typename... Ts>
struct concat<typelist<Ts...>> {
    using typelist = typelist<Ts...>;
};
template <typename... Ts1, typename... Ts2, typename... Others>
struct concat<typelist<Ts1...>, typelist<Ts2...>, Others...> {
    using typelist = typename concat<typelist<Ts1..., Ts2...>, Others...>::typelist;
};

/** Used to concat multiple typelists into a single typelist.
 *  concat_tl<typelist1<t11, t12...>, typelist2<t21, t22...>, ...>
 *  should return typelist<t11, t12, ..., t21, t22, ..., ...> */
template <typename... TLs>
using concat_tl = concat<TLs...>::typelist;

///////////////////////////////////////////
// type_set & type_set_of_tl
///////////////////////////////////////////
namespace detail {
template <typename... TLs>
struct type_set_impl;
template <>
struct type_set_impl<> {
    using typelist = typelist<>;
};
template <typename... Ts>
struct type_set_impl<typelist<Ts...>> {
    using typelist = typelist<Ts...>;
};
template <typename... Ts, typename... Us, typename... Others>
struct type_set_impl<typelist<Ts...>, typelist<Us...>, Others...> :
    type_set_impl<
        concat_tl<
            typelist<Ts...>,
            std::conditional_t<typelist<Ts...>::template has<Us>, typelist<>, typelist<Us>>...>,
        Others...> {};
} // namespace detail

template <typename... Ts>
struct type_set {
    using typelist = detail::type_set_impl<typelist<Ts>...>::typelist;
};

/** It creates a typelist containing unique types from input arguments.
 *  e.g. type_set_tl<int, float, int> becomes typelist<int, float> */
template <typename... Ts>
using type_set_tl = type_set<Ts...>::typelist;

template <typename... TLs>
struct type_set_of_tl {
    using typelist = concat_tl<TLs...>::template apply<type_set_tl>;
};
/** type_set_of_tl_tl<typelist<int>, typelist<void, int>, typelist<void>>
 *  is equivalant to typelist<int, void> */
template <typename... TLs>
using type_set_of_tl_tl = type_set_of_tl<TLs...>::typelist;

///////////////////////////////////////////
// filter_void_tl
///////////////////////////////////////////
namespace detail {
template <typename T>
struct filter_void {
    using typelist = std::conditional_t<std::is_void_v<T>, typelist<>, typelist<T>>;
};
} // namespace detail

/** filter_void_tl<NonVoid> -> typelist<T>
 *  filter_void_tl<void>    -> typelist<> */
template <typename T>
using filter_void_tl = detail::filter_void<T>::typelist;

///////////////////////////////////////////
// zip_apply
///////////////////////////////////////////
namespace detail {
template <template <typename...> typename Inner, template <typename...> typename Outer>
struct zip_apply_impl {
    template <typename... TLs>
    using apply = Outer<typename TLs::template apply<Inner>...>;
};
} // namespace detail

/** zip_apply<typelist<typelist<t11, t12>, typelist<t21, t22>>, std::variant, std::tuple>
 *  is equivalant to std::variant<std::tuple<t11, t12>, std::tuple<t21, t22>>*/
template <
    typename TL_TLs,
    template <typename...> typename Inner,
    template <typename...> typename Outer>
using zip_apply =
    typename TL_TLs::template apply<detail::zip_apply_impl<Inner, Outer>::template apply>;

///////////////////////////////////////////
// tl_wrapper
///////////////////////////////////////////
namespace detail {
template <template <typename...> typename T>
struct tl_wrapper_impl {
    template <typename... Ts>
    using typelist = typelist<T<Ts...>>;
};
} // namespace detail

/** T<...>             -> Result
 *  tl_wrapper<T<...>> -> typelist<Result> */
template <template <typename...> typename T>
using tl_wrapper = detail::tl_wrapper_impl<T>::typelist;
} // namespace spt
} // namespace robo

