module;

#include <webots/robot.h>

export module robo:support.webots;

import std;
import :support.misc;

export namespace robo {
namespace spt {
namespace detail {
class webots_impl :
    public spt::immovable_base, 
    public spt::not_copyable_base {
public:
    float basic_time_step {};
private:
    bool initialized { false };
    std::vector<std::function<void()>> step_tasks {};

public:
    ~webots_impl() {
        if (initialized) wb_robot_cleanup();
    }

    decltype(auto) operator()(auto&& func, auto&&... args) {
        if (not initialized) {
            wb_robot_init();
            basic_time_step = static_cast<float>(wb_robot_get_basic_time_step());
            initialized = true;
        }
        return func(std::forward<decltype(args)>(args)...);
    }
    void add_step_task(spt::invocable_r<void> auto&& task) {
        step_tasks.emplace_back(std::forward<decltype(task)>(task));
    }
    bool step() {
        if ((*this)(wb_robot_step, static_cast<int>(basic_time_step)) == -1) {
            return false;
        }
        for (auto& task : step_tasks) task();
        return true;
    }
};
} // namespace detail
constinit detail::webots_impl webots {};
} // namespace spt
} // namespace robo

