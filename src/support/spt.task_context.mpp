export module robo:spt.task_context;

import std;
import :spt.misc;
import :spt.multiton;
#ifdef USE_WEBOTS
import :spt.webots;
#endif
namespace stdv = std::views;
namespace stdr = std::ranges;
using namespace std::chrono_literals;

export namespace robo::spt::task_context {
///////////////////////////////////////////
// task_context base
///////////////////////////////////////////
namespace detail {
template <typename T>
struct info_base {
    using key_type = unsigned int;

    key_type id;

    [[nodiscard]]
    auto key() const { return id; }

private:
    consteval info_base(const key_type id) : id { id } {}

public:
    template <std::size_t N> requires (N > 1)
    [[nodiscard]]
    static consteval auto make() -> std::array<T, N> {
        return []<std::size_t... I>(std::index_sequence<I...>) {
            return std::array<T, N>{ T{I}... };
        }(std::make_index_sequence<N>{});
    }
    [[nodiscard]]
    static consteval auto make() -> T {
        return T{ 0 };
    }

#ifdef USE_WEBOTS
    [[nodiscard]]
    static consteval auto webots() -> info_base {
        return info_base{ std::numeric_limits<key_type>::max() };
    }
    constexpr bool is_for_webots() const {
        return id == std::numeric_limits<key_type>::max();
    }
    constexpr bool test(bool use_webots) const {
        return not ((use_webots and not is_for_webots()) or (not use_webots and is_for_webots()));
    }
#endif
};

class impl_base {
protected:
    bool started_ { false };
    bool finishing_ { false };
    bool finished_ { false };

public:
    void finish() noexcept { finishing_ = true; }
    [[nodiscard]]
    bool finished() const noexcept { return finished_; }
};
} // namespace detail

///////////////////////////////////////////
// task_context::continuous
///////////////////////////////////////////
namespace continuous {
namespace detail {
class continuous_impl : 
    public spt::immovable_base,
    public spt::not_copyable_base,
    public task_context::detail::impl_base {
public:
    struct info : task_context::detail::info_base<info> {
        using owner_type = continuous_impl;
        [[nodiscard]]
        consteval info(task_context::detail::info_base<info> info_base) :
            task_context::detail::info_base<info> { info_base } {}
        auto desc() const { 
            return std::format("continuous task context (id:{})", id);
        }
    };
    using info_type = info;

private:
    const info info_;
    std::chrono::nanoseconds idle_duration_ { std::chrono::nanoseconds::max() };
    std::vector<std::function<void()>> tasks_ {};
    std::jthread thread_ { [this] { run(); } };

public:
    continuous_impl(const info& info) : info_ { info } {}
    ~continuous_impl() {
        if (not started_) [this] { 
            throw std::logic_error{ "you created " + info_.desc() + " but never started it" }; 
        }();
        finish();
    }

    [[nodiscard]]
    auto info() const -> const info& { return info_; };
    void add_task(const std::chrono::nanoseconds& idle_duration, spt::invocable_r<void> auto&& task) {
        if (started_) {
            throw std::logic_error{ 
                "add a task to the already started " + info_.desc() + "."
            };
        }
        tasks_.emplace_back(std::forward<decltype(task)>(task));
        idle_duration_ = std::min(idle_duration_, idle_duration);
    }
    void start() {
        if (tasks_.size() == 0) {
            throw std::logic_error{ 
                info_.desc() + " has no assigned task."
            };
        }
        // TODO log
        started_ = true;
    }

private:
    void run() noexcept {
        try {
            while (not started_ and not finishing_) std::this_thread::sleep_for(10us);
            while (not finishing_) {
                for (auto& task : tasks_) task();
                std::this_thread::sleep_for(idle_duration_);
            }
            finished_ = true;
        } catch (const std::exception& e) {
            std::println("uncaught exception in {}: {}", info_.desc(), e.what());
            throw;
        }
    }
};
} // namespace detail

using info = struct detail::continuous_impl::info;
static_assert(spt::info<info>);
} // namespace continuous

///////////////////////////////////////////
// task_context::periodic
///////////////////////////////////////////
namespace periodic {
namespace detail {
class periodic_impl : 
    public spt::immovable_base, 
    public spt::not_copyable_base,
    public task_context::detail::impl_base {
public:
    struct info : task_context::detail::info_base<info> {
        using owner_type = periodic_impl;
        consteval info(task_context::detail::info_base<info> info_base) :
            task_context::detail::info_base<info> { info_base } {}
        auto desc() const { 
            return std::format("periodic task context (id:{})", id);
        }
    };
    using info_type = info;

private:
    const info info_;
    std::vector<std::pair<std::chrono::nanoseconds, std::function<void()>>> tasks_ {};
    std::jthread thread_ { [this] { run(); } };

public:
    periodic_impl(const info& info) : info_ { info } {}
    ~periodic_impl() {
        if (not started_) [this] { 
            throw std::logic_error{ "you created " + info_.desc() + " but never started it" }; 
        }();
        finish();
    }

    [[nodiscard]]
    auto info() const -> const info& { return info_; };
    void add_task(const std::chrono::nanoseconds& period, spt::invocable_r<void> auto&& task) {
        if (started_) {
            throw std::logic_error{ 
                "add a task to the already started " + info_.desc() + "."
            };
        }
        tasks_.emplace_back(period, std::forward<decltype(task)>(task));
    }
    void start() {
        if (tasks_.size() == 0) {
            throw std::logic_error{ 
                info_.desc() + " has no assigned task."
            };
        }
        // TODO log
        started_ = true;
    }

private:
    void run() noexcept {
        try {
            while (not started_ and not finishing_) std::this_thread::sleep_for(10us);
            std::chrono::steady_clock::time_point time {};
            std::vector<std::chrono::steady_clock::time_point> task_run_time;
            task_run_time.resize(tasks_.size(), std::chrono::steady_clock::now());
            while (not finishing_) {
                time = std::chrono::steady_clock::now();
                for (auto [run_time, task] : stdv::zip(task_run_time, tasks_)) {
                    if (time > run_time) {
                        task.second();
                        run_time += task.first;
                    }
                }
                std::this_thread::sleep_until(stdr::min(task_run_time));
            }
            finished_ = true;
        } catch (const std::exception& e) {
            std::println("uncaught exception in {}: {}", info_.desc(), e.what());
            throw;
        }
    }
};
} // namespace detail

using info = struct detail::periodic_impl::info;
static_assert(spt::info<info>);
} // namespace periodic

///////////////////////////////////////////
// task_context
//     type:
//         continuous
//         periodic
//     make:
//         task_context::<type>::info::make()    -> context_info
//         task_context::<type>::info::make<N>() -> std::array<context_info, N>
//         task_context::<type>::info::webots()  -> context_info_for_webots
//     usage:
//         task_context::add_task(info, time, func)
//         task_context::start()
//         task_context::finish()
//         task_context::finished() -> bool
//         task_context::wait_until_all_finished()
///////////////////////////////////////////
void add_task(auto&& info, auto&& time, auto&& func) {
#ifdef USE_WEBOTS
    using info_type = std::remove_cvref_t<decltype(info)>;
    if (info.is_for_webots()) {
        if constexpr (std::same_as<info_type, continuous::info>) {
            task_context::webots::add_update_task(std::forward<decltype(func)>(func));
        } else if constexpr (std::same_as<info_type, periodic::info>) {
            task_context::webots::add_ctrl_task(time, std::forward<decltype(func)>(func));
        } else {
            throw std::logic_error { "wrong type: info." };
        }
    } else {
        spt::multiton::get(info).add_task(time, std::forward<decltype(func)>(func));
    }
#else
    spt::multiton::get(info).add_task(time, std::forward<decltype(func)>(func));
#endif
}

void start() {
    for (auto& e : stdv::values(spt::multiton::instances<continuous::info>())) {
        e->start();
    }
    for (auto& e : stdv::values(spt::multiton::instances<periodic::info>())) {
        e->start();
    }
#ifdef USE_WEBOTS
    if (spt::webots.initialized()) task_context::webots::start();
#endif
}

void finish() {
    for (auto& e : stdv::values(spt::multiton::instances<continuous::info>())) {
        e->finish();
    }
    for (auto& e : stdv::values(spt::multiton::instances<periodic::info>())) {
        e->finish();
    }
#ifdef USE_WEBOTS
    if (spt::webots.initialized()) task_context::webots::finish();
#endif
}

bool finished() {
    bool ret { true };
    for (auto& e : stdv::values(spt::multiton::instances<continuous::info>())) {
        ret &= e->finished();
    }
    for (auto& e : stdv::values(spt::multiton::instances<periodic::info>())) {
        ret &= e->finished();
    }
#ifdef USE_WEBOTS
    if (spt::webots.initialized()) ret &= task_context::webots::finished();
#endif
    return ret;
}

void wait_until_all_finished() {
    while (not finished()) {
        std::this_thread::sleep_for(1ms);
    }
}
void wait_for(auto&& info) {
#ifdef USE_WEBOTS
    if (info.is_for_webots()) {
        while (not task_context::webots::finished()) {
            std::this_thread::sleep_for(1ms);
        }
    } else {
#endif
        while (not spt::multiton::get(info).finished()) {
            std::this_thread::sleep_for(1ms);
        }
#ifdef USE_WEBOTS
    }
#endif
    finish();
    wait_until_all_finished();
}
} // namespace robo::spt::task_context

