export module robo:dev.motor.base;

import std;
import :dev.base;

export namespace robo {
namespace dev {
struct Motor : public Dev {
protected:
    float angle_ { 0.0f };
    float speed_ { 0.0f };

public:
    using Dev::Dev;

    auto angle() const { return angle_; }
    auto speed() const { return speed_; }
};

template <typename T>
concept motor =
    std::derived_from<typename T::dev_type, Motor> and
    requires(T::dev_type t) {
        { t.setTorque(std::declval<float>()) } -> std::same_as<void>;
    };

} // namespace dev
} // namespace robo

