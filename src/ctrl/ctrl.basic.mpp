module;

#include <eigen3/Eigen/Eigen>

export module robo:ctrl.basic;

import std;
import :spt;
namespace stdr = std::ranges;

export namespace robo::ctrl {
struct pid {
public:
    struct param {
        float kp;
        float ki;
        float kd;
        float max_iout;
        float max_out;
    };

private:
    const param p;
    std::array<float, 2> error {};
    float i_out {};

public:
    explicit pid(const param& p) : p { p } {}

    float calc(const float err) {
        error[1] = error[0];
        error[0] = err;

        float p_out = p.kp * error[0];
        float d_out = p.kd * (error[0] - error[1]);
        i_out += p.ki * error[0];
        math::abs_limit(i_out, p.max_iout);

        float out = p_out + i_out + d_out;
        math::abs_limit(out, p.max_out);
        return out;
    }
    float calc(const float set, const float feedback) {
        return calc(set - feedback);
    }
    float operator()(auto... args) {
        return calc(args...);
    }
};

struct ramp {
public:
    struct param {
        struct {
            float min;
            float max;
        } out;
        float delta_max;
    };

private:
    param p;
    float val;
    std::chrono::nanoseconds init_time { spt::time::now() };
    std::chrono::nanoseconds update_time { init_time };

public:
    explicit ramp(const float init_val, const param& p) :
        p { p },
        val { init_val } {
    }
    explicit ramp(const float init_val, const float out_max, const float delta_max) :
        ramp(init_val, { { -out_max, out_max }, delta_max }) {}

    void setDeltaMax(const float delta_max) {
        p.delta_max = delta_max;
    }
    float& get() { return val; }
    float set(const float in, const decltype(update_time) t = spt::time::now()) {
        float delta = in - val;
        if (update_time == init_time) delta = 0.0f;
        math::abs_limit(delta, p.delta_max * (static_cast<float>(std::chrono::duration_cast<std::chrono::nanoseconds>(t - update_time).count()) / 1e-9f));
        val = std::clamp(val + delta, p.out.min, p.out.max);
        update_time = t;
        return val;
    }
    float operator()(const float in, const decltype(update_time) t = spt::time::now()) { return set(in, t); }
    operator float() { return val; }
};

template <std::size_t N>
struct kalman {
public:
    struct param {
        std::array<float, N * N> A;
        std::array<float, N * N> H;
        std::array<float, N * N> Q_c;
        std::array<float, N * N> R_c;
    };

private:
    const param p;

    const Eigen::Matrix<float, N, N, Eigen::RowMajor> A { p.A.data() };
    const Eigen::Matrix<float, N, N, Eigen::RowMajor> Q_c { p.Q_c.data() };
    const Eigen::Matrix<float, N, N, Eigen::RowMajor> R_c { p.R_c.data() };
    const Eigen::Matrix<float, N, N, Eigen::RowMajor> H { p.H.data() };

    Eigen::Vector<float, N> x_hat;
    Eigen::Matrix<float, N, N, Eigen::RowMajor> P { decltype(P)::Identity() };

public:
    explicit kalman(const std::array<float, N> x_hat_init, const param& p) : 
        p { p },
        x_hat { x_hat_init.data() } {
    }

    const Eigen::Vector<float, N>& update(const Eigen::Vector<float, N>& z) {
        auto x_hat_minus = A * x_hat;
        auto P_minus = A * P * A.transpose() + Q_c;
        auto K = (P_minus * H) * (H * P_minus * H.transpose() + R_c).inverse();
        x_hat = x_hat_minus + K * (z - H * x_hat_minus);
        P = (Eigen::Matrix<float, N, N>::Identity() - K * H) * P_minus;
        return x_hat;
    }
    std::array<float, N> update(const std::array<float, N>& z) {
        std::array<float, N> arr;
        auto ret = update(Eigen::Vector<float, N>{z.data()});
        stdr::copy(ret, arr.begin());
        return arr;
    }
    std::array<float, N> update(const std::floating_point auto... args) {
        return update(std::array<float, N>{args...});
    }
    decltype(auto) operator()(auto&&... args) {
        return update(std::forward<decltype(args)>(args)...);
    }
};
} // namespace robo::ctrl

