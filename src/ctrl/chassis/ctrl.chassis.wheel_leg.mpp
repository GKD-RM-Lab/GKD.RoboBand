module;

#include <eigen3/Eigen/Eigen>

export module robo:ctrl.chassis.wheel_leg;

import std;
import :dev;
import :ctrl.basic;
import :ctrl.leg;
import :spt;
namespace stdr = std::ranges;

export namespace robo::ctrl::chassis {
template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
class WheelLeg;

template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
struct WheelLegInfo {
    using ctrl_type = WheelLeg<Imu, Leg, M>;

    struct RealSp {
        struct Info {
            using type = RealSp;
            spt::task_context::periodic::info context;
            std::chrono::nanoseconds motor_ctrl_interval;
            ctrl::pid::param pid_retract;
            std::chrono::nanoseconds retract_time_min;
            float retract_speed;
            float retract_stop_speed;
            float joint_limit_angle;
        };
        std::array<ctrl::pid, 4> pid_retract;
        explicit RealSp(const Info& info) :
            pid_retract { ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract} } {}
    };
#ifdef USE_WEBOTS
    struct WebotsSp {
        struct Info {
            using type = WebotsSp;
            spt::task_context::periodic::info context { spt::task_context::periodic::info::webots() };
        };
        explicit WebotsSp(const Info&) {}
    };

    static constexpr bool use_webots = [] {
        constexpr bool leg = Leg::use_webots;
        constexpr bool m = std::same_as<M, motor::Webots::Info>;
        if (leg and m) return true;
        if (not leg and not m) return false;
        throw std::logic_error{ "mixing webots types and real types." };
    }();

    using Sp = std::conditional_t<use_webots, typename WebotsSp::Info, typename RealSp::Info>;
#else
    using Sp = RealSp::Info;
#endif

    std::chrono::nanoseconds ctrl_period;

    Imu imu;
    Leg leg_left;
    Leg leg_right;
    M wheel_left;
    M wheel_right;

    Sp special;

    struct {
        float f_gravity;
        float wheel_mass;
        float wheel_radius;
        float wheel_spacing;
        float leg_length_min;
    } constant;

    struct {
        struct {
            float min;
            float max;
            float mid;
        } height_set;
        struct {
            float max;
            float delta_max;
            float dead_zone;
        } roll_set;
        struct {
            float max;
            float delta_max;
            float dead_zone;
            float stop;
            float recalculate_delta;
        } speed_set;
        struct {
            float max;
            float delta_max;
            float dead_zone;
            float stop;
            float recalculate_delta;
        } yaw_speed_set;
        float theta_l_ref_max;
        float theta_b_ref_max;
    } limit;
    
    struct {
        std::array<float, 40> K00;
        std::array<float, 40> K10;
        std::array<float, 40> K01;
        std::array<float, 40> K20;
        std::array<float, 40> K11;
        std::array<float, 40> K02;

        ctrl::pid::param pid_height;
        ctrl::pid::param pid_psi;

        ctrl::kalman<2>::param speed_observer;

        std::chrono::nanoseconds cent_acc_filter_t;
        std::chrono::nanoseconds wheel_height_acc_filter_t;

        float roll_compensation_ratio;
        std::chrono::nanoseconds off_ground_time;
        float off_ground_torque;
    } param;
};

template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
class WheelLeg final :
    public spt::immovable_base, 
    public spt::not_copyable_base,
    private WheelLegInfo<Imu, Leg, M> {
public: 
    using Info = WheelLegInfo<Imu, Leg, M>;

private:
    Info::Sp::type sp { Info::special };

    bool started_ { false };
    bool stopped { false };

    ctrl::ramp speed_set { 0.0f, this->limit.speed_set.max, this->limit.speed_set.delta_max };
    ctrl::ramp yaw_speed_set { 0.0f, this->limit.yaw_speed_set.max, this->limit.yaw_speed_set.delta_max };
    ctrl::ramp roll_set { 0.0f, this->limit.roll_set.max, this->limit.roll_set.delta_max };
    float height_set { this->limit.height_set.mid };

    float displacement_offset {};
    float phi_offset {};

    const Eigen::Matrix<float, 2, 4, Eigen::RowMajor> trans { std::array{
        1.0f, 1.0f, 1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f
    }.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K00 { this->param.K00.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K10 { this->param.K10.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K01 { this->param.K01.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K20 { this->param.K20.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K11 { this->param.K11.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K02 { this->param.K02.data() };
    ctrl::pid pid_height { this->param.pid_height };
    ctrl::pid pid_psi { this->param.pid_psi };
    ctrl::kalman<2> speed_observer { { 0.0f, 0.0f }, this->param.speed_observer };
    ctrl::filter cent_acc { static_cast<float>(this->ctrl_period.count()) / static_cast<float>(this->param.cent_acc_filter_t.count()) };

    struct wheel_height_acc_calc {
        const float t_sample;
        ctrl::filter val;
        float v_last {};
        void update(const float body_height_acc, const float v) {
            val.update(body_height_acc - (v - v_last) / t_sample);
            v_last = v;
        }
        operator float() const { return val; }
        explicit wheel_height_acc_calc(const std::pair<float, float>& arg) :
            t_sample { arg.first }, val { arg.second } {}
    };
    spt::pair<wheel_height_acc_calc> wheel_height_acc {
        std::pair { 
            std::chrono::duration_cast<std::chrono::duration<float>>(this->ctrl_period).count(), 
            static_cast<float>(this->ctrl_period.count()) / static_cast<float>(this->param.wheel_height_acc_filter_t.count()) 
        },
        std::pair { 
            std::chrono::duration_cast<std::chrono::duration<float>>(this->ctrl_period).count(), 
            static_cast<float>(this->ctrl_period.count()) / static_cast<float>(this->param.wheel_height_acc_filter_t.count()) 
        },
    };

    const unsigned off_ground_cnt_max { static_cast<unsigned>(this->param.off_ground_time / this->ctrl_period) };
    spt::pair<unsigned> off_ground_cnt {};
    spt::pair<bool> off_ground_flag { true, true };

public:
    Imu::dev_type imu { Info::imu };
    spt::pair<typename Leg::ctrl_type> leg { this->leg_left, this->leg_right };
    spt::pair<typename M::dev_type> wheel { this->wheel_left, this->wheel_right };

public:
    explicit WheelLeg(const Info& info) : 
        Info { info } {
#ifdef USE_WEBOTS
        if (not this->special.context.test(Info::use_webots)) {
            throw std::logic_error{ 
                std::format("wrong context type: {}", this->special.context.desc())
            };
        }
#endif
        spt::task_context::add_task(this->special.context, this->ctrl_period, [this] { ctrl_loop(); });
    }

    void run() { started_ = true; };

    void emergencyStop() { stopped = true; }
    void restart() { stopped = false; }
    void setSpeed(float val) { speed_set(val); }
    void setYawSpeed(float val) { yaw_speed_set(val); }
    void setHeight(float val) { height_set = std::clamp(val, this->limit.height_set.min, this->limit.height_set.max); }
    void setRoll(float val) { roll_set(val); }

#ifdef USE_WEBOTS
    void init() requires Info::use_webots {
        while (dev::is_offline(imu, wheel.left, wheel.right, leg.left.motor1, leg.left.motor2, leg.right.motor1, leg.right.motor2));
        phi_offset = imu.angle(imu::axis::yaw);
        wheel.left.setAngle(0.0f);
        wheel.right.setAngle(0.0f);
        leg.left.motor1.setAngle(3.447f);
        leg.left.motor2.setAngle(3.447f);
        leg.right.motor1.setAngle(3.447f);
        leg.right.motor2.setAngle(3.447f);
    }
    void init() requires (not Info::use_webots) {
#else
    void init() {
#endif
        std::array<std::reference_wrapper<typename M::dev_type>, 4> motor { leg.left.motor1, leg.right.motor1, leg.left.motor2, leg.right.motor2 };
        auto t { std::chrono::steady_clock::now() };
        auto t_start = t;
        while (true) {
            if (stopped or dev::is_offline(imu, wheel.left, wheel.right, leg.left.motor1, leg.left.motor2, leg.right.motor1, leg.right.motor2)) {
                setZeroTorque();
                t_start = t;
            } else {
                setTorque(0.0f, 0.0f,
                    sp.pid_retract[0](this->special.retract_speed, motor[0].get().speed()),
                    sp.pid_retract[1](this->special.retract_speed, motor[1].get().speed()),
                    sp.pid_retract[2](this->special.retract_speed, motor[2].get().speed()),
                    sp.pid_retract[3](this->special.retract_speed, motor[3].get().speed())
                );

                if (t - t_start > this->special.retract_time_min) {
                    bool leg_stopped { true };
                    for (auto& m : motor) {
                        if (std::abs(m.get().speed()) > this->special.retract_stop_speed) {
                            leg_stopped = false;
                        }
                    }
                    if (leg_stopped) {
                        for (auto& m : motor) {
                            m.get().setAngle(this->special.joint_limit_angle);
                        }
                        phi_offset = imu.angle(imu::axis::yaw);
                        wheel.left.setAngle(0.0f);
                        wheel.right.setAngle(0.0f);
                        break;
                    }
                }
            }
            t += this->ctrl_period;
            std::this_thread::sleep_until(t);
        }
    }

private:
    auto wheel_left_ground_angle() -> std::array<float, 2> {
        return {
            wheel.left.angle() + leg.left.wheel_angle_offset()[0] + imu.angle(imu::axis::pitch),
            wheel.left.speed() + leg.left.wheel_angle_offset()[1] + imu.gyro(imu::axis::pitch),
        };
    }
    auto wheel_right_ground_angle() -> std::array<float, 2> {
        return {
            wheel.right.angle() + leg.right.wheel_angle_offset()[0] + imu.angle(imu::axis::pitch),
            wheel.right.speed() + leg.right.wheel_angle_offset()[1] + imu.gyro(imu::axis::pitch),
        };
    }
    float wheel_displacement_avg() {
        return (wheel_left_ground_angle()[0] + wheel_right_ground_angle()[1]) * this->constant.wheel_radius / 2.0f;
    }
    float wheel_speed_avg() {
        return (wheel_left_ground_angle()[1] + wheel_right_ground_angle()[1]) * this->constant.wheel_radius / 2.0f;
    }

    void setTorque(float wl, float wr, float ll1, float ll2, float lr1, float lr2) {
        wheel.left.setTorque(wl);
        leg.left.motor1.setTorque(ll1);
        leg.right.motor1.setTorque(lr1);
#ifdef USE_WEBOTS
        if constexpr (not Info::use_webots) {
#endif
            std::this_thread::sleep_for(this->special.motor_ctrl_interval);
#ifdef USE_WEBOTS
        }
#endif
        wheel.right.setTorque(wr);
        leg.left.motor2.setTorque(ll2);
        leg.right.motor2.setTorque(lr2);
    }
    void setZeroTorque() {
        setTorque(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);
    }

    void ctrl_loop() {
        if (not started_) return;
        if (stopped or dev::is_offline(imu, wheel.left, wheel.right, leg.left.motor1, leg.left.motor2, leg.right.motor1, leg.right.motor2)) {
            setZeroTorque();
            return;
        }
   
        // state update
        leg.left.update();
        leg.right.update();

        float l_l = leg.left.length()[0];
        float l_r = leg.right.length()[0];
    
        float theta_b = imu.angle(imu::axis::pitch);
        float dot_theta_b = imu.gyro(imu::axis::pitch);
        float theta_l_1 = leg.left.angle()[0] + theta_b;
        float theta_l_2 = leg.right.angle()[0] + theta_b;
        float dot_theta_l_1 = leg.left.angle()[1] + dot_theta_b;
        float dot_theta_l_2 = leg.right.angle()[1] + dot_theta_b;

        float dot_s = wheel_speed_avg();
        float dot_s_leg = (leg.left.length()[1]  * std::sin(theta_l_1) + l_l * dot_theta_l_1 * std::cos(theta_l_1) +
                           leg.right.length()[1] * std::sin(theta_l_2) + l_r * dot_theta_l_2 * std::cos(theta_l_2)) / 2.0f;
        auto [speed, _] = speed_observer(dot_s + dot_s_leg, imu.acc(imu::axis::x));
        dot_s = speed - dot_s_leg;

        float s = wheel_displacement_avg();
        float s_leg = (l_l * std::sin(theta_l_1) + l_r * std::sin(theta_l_2)) / 2.0f;
        float displacement = s + s_leg;
        if (std::abs(speed_set) > this->limit.speed_set.dead_zone or std::abs(speed) > this->limit.speed_set.stop) {
            displacement_offset = displacement;
        }
        displacement = displacement - displacement_offset;
        s = displacement - s_leg;

        float dot_phi = imu.gyro(imu::axis::yaw);
        float phi = imu.angle(imu::axis::yaw);
        if (std::abs(yaw_speed_set) > this->limit.yaw_speed_set.dead_zone or std::abs(dot_phi) > this->limit.yaw_speed_set.stop) {
            phi_offset = phi;
        }
        phi = std::remainder(phi - phi_offset, 2.0f * std::numbers::pi_v<float>);

        math::abs_limit(theta_l_1, this->limit.theta_l_ref_max);
        math::abs_limit(theta_l_2, this->limit.theta_l_ref_max);
        math::abs_limit(theta_b, this->limit.theta_b_ref_max);

        cent_acc.update(speed * imu.gyro(imu::axis::yaw) - cent_acc);

        float acc_world_z = [&, this] {
            Eigen::Vector<float, 3> acc_body { imu.acc(imu::axis::x), imu.acc(imu::axis::y), imu.acc(imu::axis::z) };
            float cx = std::cos(imu.angle(imu::axis::x));
            float sx = std::sin(imu.angle(imu::axis::x));
            float cy = std::cos(imu.angle(imu::axis::y));
            float sy = std::sin(imu.angle(imu::axis::y));
            float cz = std::cos(imu.angle(imu::axis::z));
            float sz = std::sin(imu.angle(imu::axis::z));
            float R02 = cx * sy * cz + sx * sz;
            float R12 = cx * sy * sz - sx * cz;
            float R22 = cx * cy;
            return acc_body.x() * R02 + acc_body.y() * R12 + acc_body.z() * R22;
        }();
        wheel_height_acc.left.update(acc_world_z - 9.8f, leg.left.length()[1] * std::cos(leg.left.angle()[0]) - leg.left.length()[0] * leg.left.angle()[1] * std::sin(leg.left.angle()[0]));
        wheel_height_acc.right.update(acc_world_z - 9.8f, leg.right.length()[1] * std::cos(leg.right.angle()[0]) - leg.right.length()[0] * leg.right.angle()[1] * std::sin(leg.right.angle()[0]));

        spt::pair<float> f_n_wheel;
        f_n_wheel.left = leg.left.force().first * std::cos(leg.left.angle()[0]) + leg.left.force().second / leg.left.length()[0] * std::sin(leg.left.angle()[0]) + this->constant.wheel_mass * (9.8f + wheel_height_acc.left);
        f_n_wheel.right = leg.right.force().first * std::cos(leg.right.angle()[0]) + leg.right.force().second / leg.right.length()[0] * std::sin(leg.right.angle()[0]) + this->constant.wheel_mass * (9.8f + wheel_height_acc.right);

        if ((off_ground_flag.left xor (f_n_wheel.left < this->param.off_ground_torque)) or (off_ground_flag.left and leg.left.length()[0] < this->constant.leg_length_min)) {
            off_ground_cnt.left++;
        } else {
            off_ground_cnt.left = 0;
        }
        if ((off_ground_flag.right xor (f_n_wheel.right < this->param.off_ground_torque)) or (off_ground_flag.right and leg.right.length()[0] < this->constant.leg_length_min)) {
            off_ground_cnt.right++;
        } else {
            off_ground_cnt.right = 0;
        }
        if (off_ground_cnt.left > off_ground_cnt_max) {
            off_ground_flag.left = not off_ground_flag.left;
            off_ground_cnt.left = 0;
        }
        if (off_ground_cnt.right > off_ground_cnt_max) {
            off_ground_flag.right = not off_ground_flag.right;
            off_ground_cnt.right = 0;
        } 
        if (off_ground_flag.left and off_ground_flag.right) { 
            setZeroTorque();
            return;
        }

        // control
        auto K = K00 + K10 * l_l + K01 * l_r + K20 * (l_l * l_l) + K11 * (l_l * l_r) + K02 * (l_r * l_r);
        
        Eigen::Vector<float, 10> state_ref { 
            s, dot_s, phi, dot_phi, theta_l_1, dot_theta_l_1, theta_l_2, dot_theta_l_2, theta_b, dot_theta_b 
        };
        float height_ref = 0.5f * (l_l * std::cos(theta_l_1) + l_r * std::cos(theta_l_2));

        Eigen::Vector<float, 10> state_set;
        state_set.setZero();
        state_set(0) = -s_leg;
        state_set(1) = speed_set - dot_s_leg;
        state_set(3) = yaw_speed_set;
        Eigen::Vector<float, 10> state_err = state_set - state_ref;

        float roll_set_final = math::abs_limited(((std::abs(roll_set) < this->limit.roll_set.dead_zone) ? 0.0f : roll_set) - 
                                                 this->param.roll_compensation_ratio * std::atan2(cent_acc, 9.8f), this->limit.roll_set.max);
        float f_psi = pid_psi(roll_set_final, imu.angle(imu::axis::roll));

        float height_set_final = std::clamp(height_set - std::tan(std::abs(imu.angle(imu::axis::roll))) * 
                                            this->constant.wheel_spacing / 2.0f, 
                                            this->limit.height_set.min, this->limit.height_set.max);
        float f_l = pid_height(height_set_final, height_ref);

        float f_inertial = (this->constant.f_gravity / 9.8f) *
                           (((l_l + l_r) / 2.0f + this->constant.wheel_radius) / this->constant.wheel_spacing) * 
                           cent_acc;
        Eigen::Vector<float, 4> f_ctrl { f_psi, f_l, this->constant.f_gravity, f_inertial };
        Eigen::Vector<float, 2> f_n = trans * f_ctrl;

        bool torque_over_limit;
        do {
            torque_over_limit = false;

            Eigen::Vector<float, 4> ctrl_vec = K * state_err;
            if (off_ground_flag.left) ctrl_vec(0) = 0.0f;
            if (off_ground_flag.right) ctrl_vec(1) = 0.0f;

            float f1_l {}, f2_l {}, f1_r {}, f2_r {};
            std::tie(f1_l, f2_l) = leg.left.calcForce(f_n(0), ctrl_vec(2));
            std::tie(f1_r, f2_r) = leg.right.calcForce(f_n(1), ctrl_vec(3));

            std::array ratio {
                std::abs(ctrl_vec(0)) / wheel.left.torque_max(),
                std::abs(ctrl_vec(1)) / wheel.right.torque_max(),
                std::abs(f1_l) / leg.left.motor1.torque_max(),
                std::abs(f2_l) / leg.left.motor2.torque_max(),
                std::abs(f1_r) / leg.right.motor1.torque_max(),
                std::abs(f2_r) / leg.right.motor2.torque_max(),
            };
            if (stdr::max(ratio) > 1.0f) {
                torque_over_limit = true;
                state_err(1) = (std::abs(state_err(1)) <= this->limit.speed_set.recalculate_delta) ?
                               0.0f : (state_err(1) - std::copysign(this->limit.speed_set.recalculate_delta, state_err(1)));
                state_err(3) = (std::abs(state_err(3)) <= this->limit.yaw_speed_set.recalculate_delta) ?
                               0.0f : (state_err(3) - std::copysign(this->limit.yaw_speed_set.recalculate_delta, state_err(3)));
                if (state_err(1) == 0.0f and state_err(3) == 0.0f) {
                    auto limit = [ratio = stdr::max(ratio)](auto&... f) { ((f /= ratio), ...); };
                    limit(ctrl_vec(0), ctrl_vec(1), f1_l, f2_l, f1_r, f2_r);
                    torque_over_limit = false;
                } else {
                    continue;
                }
            }
            setTorque(ctrl_vec(0), ctrl_vec(1), f1_l, f2_l, f1_r, f2_r);
        } while (torque_over_limit);
    }
};
} // namespace robo::ctrl::chassis

