module;

#include <eigen3/Eigen/Eigen>

export module robo:ctrl.chassis.wheel_leg;

import std;
import :dev;
import :ctrl.basic;
import :ctrl.leg;
import :spt;
namespace stdr = std::ranges;

export namespace robo::ctrl::chassis {
template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
class WheelLeg;

template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
struct WheelLegInfo {
    using ctrl_type = WheelLeg<Imu, Leg, M>;

    struct RealSp {
        struct Info {
            using type = RealSp;
            spt::task_context::periodic::info context;
            std::chrono::nanoseconds motor_ctrl_interval;
            ctrl::pid::param pid_retract;
            std::chrono::nanoseconds retract_time_min;
            float retract_speed;
            float retract_stop_speed;
            float joint_limit_angle;
        };
        std::array<ctrl::pid, 4> pid_retract;
        explicit RealSp(const Info& info) :
            pid_retract { ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract}, ctrl::pid{info.pid_retract} } {}
    };
#ifdef USE_WEBOTS
    struct WebotsSp {
        struct Info {
            using type = WebotsSp;
            spt::task_context::periodic::info context { spt::task_context::periodic::info::webots() };
        };
        explicit WebotsSp(const Info&) {}
    };

    static constexpr bool use_webots = [] {
        constexpr bool leg = Leg::use_webots;
        constexpr bool m = std::same_as<M, motor::Webots::Info>;
        if (leg and m) return true;
        if (not leg and not m) return false;
        throw std::logic_error{ "mixing webots types and real types." };
    }();

    using Sp = std::conditional_t<use_webots, typename WebotsSp::Info, typename RealSp::Info>;
#else
    using Sp = RealSp::Info;
#endif

    std::chrono::nanoseconds ctrl_period;

    Imu imu;
    Leg leg_left;
    Leg leg_right;
    M wheel_left;
    M wheel_right;

    Sp special;

    struct {
        float f_gravity;
        float wheel_radius;
        float wheel_spacing;
    } constant;

    struct {
        struct {
            float min;
            float max;
            float mid;
        } height_set;
        struct {
            float max;
            float dead_zone;
        } roll_set;
        struct {
            float max;
            float delta_max;
            float dead_zone;
            float stop;
            float recalculate_delta;
        } speed_set;
        struct {
            float max;
            float delta_max;
            float dead_zone;
            float stop;
            float recalculate_delta;
        } yaw_speed_set;
        float theta_l_ref_max;
        float theta_b_ref_max;
    } limit;
    
    struct {
        std::array<float, 40> K;
        ctrl::pid::param pid_height;
        ctrl::pid::param pid_psi;
        ctrl::kalman<2>::param speed_observer;
    } param;
};

template <dev::imu Imu, ctrl::leg Leg, dev::motor M>
class WheelLeg final :
    public spt::immovable_base, 
    public spt::not_copyable_base,
    private WheelLegInfo<Imu, Leg, M> {
public: 
    using Info = WheelLegInfo<Imu, Leg, M>;

private:
    Info::Sp::type sp { Info::special };

    bool started_ { false };
    bool emergency_stopped { false };

    ctrl::ramp speed_set { 0.0f, this->limit.speed_set.max, this->limit.speed_set.delta_max };
    ctrl::ramp yaw_speed_set { 0.0f, this->limit.yaw_speed_set.max, this->limit.yaw_speed_set.delta_max };
    float height_set { this->limit.height_set.mid };
    float roll_set {};

    float displacement_offset {};
    float phi_offset {};

    const Eigen::Matrix<float, 2, 4, Eigen::RowMajor> trans { std::array{
        1.0f, 1.0f, 1.0f, -1.0f, -1.0f, 1.0f, 1.0f, 1.0f
    }.data() };
    const Eigen::Matrix<float, 4, 10, Eigen::RowMajor> K { this->param.K.data() };
    ctrl::pid pid_height { this->param.pid_height };
    ctrl::pid pid_psi { this->param.pid_psi };
    ctrl::kalman<2> speed_observer { { 0.0f, 0.0f }, this->param.speed_observer };

public:
    Imu::dev_type  imu         { Info::imu };
    Leg::ctrl_type leg_left    { Info::leg_left };
    Leg::ctrl_type leg_right   { Info::leg_right };
    M::dev_type    wheel_left  { Info::wheel_left };
    M::dev_type    wheel_right { Info::wheel_right };

public:
    explicit WheelLeg(const Info& info) : 
        Info { info } {
#ifdef USE_WEBOTS
        if (not this->special.context.test(Info::use_webots)) {
            throw std::logic_error{ 
                std::format("wrong context type: {}", this->special.context.desc())
            };
        }
#endif
        spt::task_context::add_task(this->special.context, this->ctrl_period, [this] { ctrl_loop(); });
    }

    void run() { started_ = true; };

    void emergencyStop() { emergency_stopped = true; }
    void setSpeed(float val) { speed_set(val); }
    void setYawSpeed(float val) { yaw_speed_set(val); }
    void setHeight(float val) { height_set = std::clamp(val, this->limit.height_set.min, this->limit.height_set.max); }
    void setRoll(float val) { roll_set = math::abs_limited(val, this->limit.roll_set.max); }

#ifdef USE_WEBOTS
    void init() requires Info::use_webots {
        while (dev::is_offline(imu, wheel_left, wheel_right, leg_left.motor1, leg_left.motor2, leg_right.motor1, leg_right.motor2));
        phi_offset = imu.angle(imu::axis::yaw);
        wheel_left.setAngle(0.0f);
        wheel_right.setAngle(0.0f);
        leg_left.motor1.setAngle(3.447f);
        leg_left.motor2.setAngle(3.447f);
        leg_right.motor1.setAngle(3.447f);
        leg_right.motor2.setAngle(3.447f);
    }
    void init() requires (not Info::use_webots) {
#else
    void init() {
#endif
        std::array<std::reference_wrapper<typename M::dev_type>, 4> motor { leg_left.motor1, leg_right.motor1, leg_left.motor2, leg_right.motor2 };
        auto t { std::chrono::steady_clock::now() };
        auto t_start = t;
        while (true) {
            if (dev::is_offline(imu, wheel_left, wheel_right, leg_left.motor1, leg_left.motor2, leg_right.motor1, leg_right.motor2)) {
                setZeroTorque();
                t_start = t;
            } else {
                setTorque(0.0f, 0.0f,
                    sp.pid_retract[0](this->special.retract_speed, motor[0].get().speed()),
                    sp.pid_retract[1](this->special.retract_speed, motor[1].get().speed()),
                    sp.pid_retract[2](this->special.retract_speed, motor[2].get().speed()),
                    sp.pid_retract[3](this->special.retract_speed, motor[3].get().speed())
                );

                if (t - t_start > this->special.retract_time_min) {
                    bool stopped { true };
                    for (auto& m : motor) {
                        if (std::abs(m.get().speed()) > this->special.retract_stop_speed) {
                            stopped = false;
                        }
                    }
                    if (stopped) {
                        for (auto& m : motor) {
                            m.get().setAngle(this->special.joint_limit_angle);
                        }
                        phi_offset = imu.angle(imu::axis::yaw);
                        wheel_left.setAngle(0.0f);
                        wheel_right.setAngle(0.0f);
                        break;
                    }
                }
            }
            t += this->ctrl_period;
            std::this_thread::sleep_until(t);
        }
    }

private:
    auto wheel_left_ground_angle() -> std::pair<float, float> {
        return {
            wheel_left.angle() + leg_left.wheel_angle_offset().first + imu.angle(imu::axis::pitch),
            wheel_left.speed() + leg_left.wheel_angle_offset().second + imu.gyro(imu::axis::pitch),
        };
    }
    auto wheel_right_ground_angle() -> std::pair<float, float> {
        return {
            wheel_right.angle() + leg_right.wheel_angle_offset().first + imu.angle(imu::axis::pitch),
            wheel_right.speed() + leg_right.wheel_angle_offset().second + imu.gyro(imu::axis::pitch),
        };
    }
    float wheel_displacement_avg() {
        return (wheel_left_ground_angle().first + wheel_right_ground_angle().first) * this->constant.wheel_radius / 2.0f;
    }
    float wheel_speed_avg() {
        return (wheel_left_ground_angle().second + wheel_right_ground_angle().second) * this->constant.wheel_radius / 2.0f;
    }

    void setTorque(float wl, float wr, float ll1, float ll2, float lr1, float lr2) {
        wheel_left.setTorque(wl);
        leg_left.motor1.setTorque(ll1);
        leg_right.motor1.setTorque(lr1);
#ifdef USE_WEBOTS
        if constexpr (not Info::use_webots) {
#endif
            std::this_thread::sleep_for(this->special.motor_ctrl_interval);
#ifdef USE_WEBOTS
        }
#endif
        wheel_right.setTorque(wr);
        leg_left.motor2.setTorque(ll2);
        leg_right.motor2.setTorque(lr2);
    }
    void setZeroTorque() {
        setTorque(0.0f, 0.0f, 0.0f, 0.0f, 0.0f, 0.0f);
    }

    void ctrl_loop() {
        if (not started_) return;
        if (emergency_stopped or dev::is_offline(imu, wheel_left, wheel_right, leg_left.motor1, leg_left.motor2, leg_right.motor1, leg_right.motor2)) {
            setZeroTorque();
            return;
        }
   
        // state update
        leg_left.update();
        leg_right.update();
    
        float theta_b = imu.angle(imu::axis::pitch);
        float dot_theta_b = imu.gyro(imu::axis::pitch);
        float theta_l_1 = leg_left.angle().first + theta_b;
        float theta_l_2 = leg_right.angle().first + theta_b;
        float dot_theta_l_1 = leg_left.angle().second + dot_theta_b;
        float dot_theta_l_2 = leg_right.angle().second + dot_theta_b;

        float dot_s = wheel_speed_avg();
        float dot_s_leg = (leg_left.length().second  * std::sin(theta_l_1) + leg_left.length().first  * dot_theta_l_1 * std::cos(theta_l_1) +
                           leg_right.length().second * std::sin(theta_l_2) + leg_right.length().first * dot_theta_l_2 * std::cos(theta_l_2)) / 2.0f;
        auto [speed, _] = speed_observer(dot_s + dot_s_leg, imu.acc(imu::axis::x));
        dot_s = speed - dot_s_leg;

        float s = wheel_displacement_avg();
        float s_leg = (leg_left.length().first * std::sin(theta_l_1) + leg_right.length().first * std::sin(theta_l_2)) / 2.0f;
        float displacement = s + s_leg;
        if (std::abs(speed_set) > this->limit.speed_set.dead_zone or std::abs(speed) > this->limit.speed_set.stop) {
            displacement_offset = displacement;
        }
        displacement = displacement - displacement_offset;
        s = displacement - s_leg;

        float phi = imu.angle(imu::axis::yaw);
        if (std::abs(yaw_speed_set) > this->limit.yaw_speed_set.dead_zone or std::abs(yaw_speed_set) > this->limit.yaw_speed_set.stop) {
            phi_offset = phi;
        }
        phi = std::remainder(phi - phi_offset, 2.0f * std::numbers::pi_v<float>);
        float dot_phi = imu.gyro(imu::axis::yaw);

        math::abs_limit(theta_l_1, this->limit.theta_l_ref_max);
        math::abs_limit(theta_l_2, this->limit.theta_l_ref_max);
        math::abs_limit(theta_b, this->limit.theta_b_ref_max);

        // control
        Eigen::Vector<float, 10> state_ref { 
            s, dot_s, phi, dot_phi, theta_l_1, dot_theta_l_1, theta_l_2, dot_theta_l_2, theta_b, dot_theta_b 
        };
        float height_ref = 0.5f * (leg_left.length().first * std::cos(theta_l_1) + leg_right.length().first * std::cos(theta_l_2));

        Eigen::Vector<float, 10> state_set;
        state_set.setZero();
        state_set(0) = -s_leg;
        state_set(1) = speed_set - dot_s_leg;
        state_set(3) = yaw_speed_set;
        Eigen::Vector<float, 10> state_err = state_set - state_ref;

        float f_psi = pid_psi((std::abs(roll_set) < this->limit.roll_set.dead_zone) ? 0.0f : roll_set, imu.angle(imu::axis::roll));
        float f_l = pid_height(height_set, height_ref);
        float f_inertial = (this->constant.f_gravity / 9.8f) *
                            (((leg_left.length().first + leg_right.length().first) / 2.0f) / this->constant.wheel_spacing) * 
                            speed * imu.gyro(imu::axis::roll);
        Eigen::Vector<float, 4> f_ctrl { f_psi, f_l, this->constant.f_gravity, f_inertial };
        Eigen::Vector<float, 2> f_n = trans * f_ctrl;

        bool torque_over_limit;
        do {
            torque_over_limit = false;

            Eigen::Vector<float, 4> ctrl_vec = K * state_err;
            float f1_l {}, f2_l {}, f1_r {}, f2_r {};
            std::tie(f1_l, f2_l) = leg_left.calcForce(f_n(0), ctrl_vec(2));
            std::tie(f1_r, f2_r) = leg_right.calcForce(f_n(1), ctrl_vec(3));

            std::array ratio {
                std::abs(ctrl_vec(0)) / wheel_left.torque_max(),
                std::abs(ctrl_vec(1)) / wheel_right.torque_max(),
                std::abs(f1_l) / leg_left.motor1.torque_max(),
                std::abs(f2_l) / leg_left.motor2.torque_max(),
                std::abs(f1_r) / leg_right.motor1.torque_max(),
                std::abs(f2_r) / leg_right.motor2.torque_max(),
            };
            if (stdr::max(ratio) > 1.0f) {
                torque_over_limit = true;
                state_err(1) = (std::abs(state_err(1)) <= this->limit.speed_set.recalculate_delta) ?
                               0.0f : (state_err(1) - std::copysign(this->limit.speed_set.recalculate_delta, state_err(1)));
                state_err(3) = (std::abs(state_err(3)) <= this->limit.yaw_speed_set.recalculate_delta) ?
                               0.0f : (state_err(3) - std::copysign(this->limit.yaw_speed_set.recalculate_delta, state_err(3)));
                if (state_err(1) == 0.0f and state_err(3) == 0.0f) {
                    auto limit = [ratio = stdr::max(ratio)](auto&... f) { ((f /= ratio), ...); };
                    limit(ctrl_vec(0), ctrl_vec(1), f1_l, f2_l, f1_r, f2_r);
                    torque_over_limit = false;
                } else {
                    continue;
                }
            }
            setTorque(ctrl_vec(0), ctrl_vec(1), f1_l, f2_l, f1_r, f2_r);
        } while (torque_over_limit);
    }
};
} // namespace robo::ctrl::chassis

