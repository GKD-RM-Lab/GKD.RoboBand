export module exec:coro;

import std;

export namespace exec {
enum class coro : bool {
    lazy  = true,
    eager = false,
};

template <typename T, exec::coro Lazy>
class [[nodiscard]] task {
private:
    using result_t = 
        std::variant<
            std::monostate,
            std::conditional_t<std::is_void_v<T>, std::monostate, T>,
            std::exception_ptr,
            std::monostate>;
    enum result_case : std::size_t { 
        empty     = 0,
        value     = 1,
        exception = 2,
        detached  = 3,
    };

    struct promise;
    std::coroutine_handle<promise> coro_hdl_;


public:
    using value_type = T;
    using promise_type = promise;

private:
    /** promise ******************************/
    /** return */
    struct promise_base_void {
        result_t result_ {};
        void return_void() noexcept
            requires std::is_void_v<T> {
            result_.template emplace<result_case::value>();
        }
        void result()
            requires std::is_void_v<T> {
            if (result_.index() == result_case::exception) {
                std::rethrow_exception(std::get<result_case::exception>(result_));
            }
        }
    };
    struct promise_base_non_void {
        result_t result_ {};
        template <typename U>
            requires std::constructible_from<T, U>
        void return_value(U&& value) 
            noexcept(std::is_nothrow_constructible_v<T, U>)
            requires (not std::is_void_v<T>) {
            if (result_.index() == result_case::detached)
                return;
            result_.template emplace<result_case::value>(std::forward<U>(value));
        }
        decltype(auto) result(this auto&& self)
            requires (not std::is_void_v<T>) {
            if (self.result_.index() == result_case::exception) {
                std::rethrow_exception(std::get<result_case::exception>(self.result_));
            }
            return std::forward_like<decltype(self)>(
                std::get<result_case::value>(self.result_)
            );
        }
    };
    using promise_base = 
        std::conditional_t<std::is_void_v<T>, promise_base_void, promise_base_non_void>;

    struct promise : public promise_base {
        using promise_base::result_;
        std::coroutine_handle<> coro_hdl_next_ {};

        /** object */
        auto get_return_object() noexcept -> task {
            return task{ std::coroutine_handle<promise>::from_promise(*this) };
        }

        /** exception */
        void unhandled_exception() noexcept {
            result_.template emplace<result_case::exception>(std::current_exception());
        }

        /** init */
        auto initial_suspend() noexcept {
            if constexpr (Lazy == exec::coro::lazy) {
                return std::suspend_always{};
            } else {
                return std::suspend_never{};
            }
        }

        /** final */
        struct final_awaitable {
            bool await_ready() const noexcept {
                return false;
            }
            void await_resume() noexcept {}
            auto await_suspend(std::coroutine_handle<promise> coro_hdl) noexcept
                -> std::coroutine_handle<> {
                auto& p = coro_hdl.promise();
                if (p.result_.index() != result_case::detached) {
                    if (p.coro_hdl_next_) {
                        return p.coro_hdl_next_;
                    } else {
                        return std::noop_coroutine();
                    }
                }
                if (p.coro_hdl_next_) {
                    p.coro_hdl_next_.destroy();
                }
                coro_hdl.destroy();
                return std::noop_coroutine();
            }
        };

        auto final_suspend() noexcept {
            return final_awaitable{};
        }
    };

public:
    /** task ctors ***************************/
    task() noexcept : coro_hdl_ { nullptr } {}
    explicit task(std::coroutine_handle<promise> coro_hdl) : coro_hdl_ { coro_hdl } {}

    task(task&& t) noexcept : coro_hdl_(t.coro_hdl_) {
        t.coro_hdl_ = nullptr;
    }
    task& operator=(task&& other) noexcept {
        if (std::addressof(other) != this) {
            if (coro_hdl_) {
                coro_hdl_.destroy();
            }
            coro_hdl_ = other.coro_hdl_;
            other.coro_hdl_ = nullptr;
        }
        return *this;
    }

    task(const task&) = delete;
    task& operator=(const task&) = delete;

    ~task() {
        if (!coro_hdl_)
            return;
        if (!coro_hdl_.done()) {
            coro_hdl_.promise().result_.template emplace<result_case::detached>(
                std::monostate{}
            );
        } else {
            coro_hdl_.destroy();
        }
    }

    /** functions ****************************/
    void detach() noexcept {
        coro_hdl_ = nullptr;
    }
    bool is_ready() const noexcept {
        return not coro_hdl_ or coro_hdl_.done();
    }
    decltype(auto) result(this auto&& self) {
		return std::forward_like<decltype(self)>(self.coro_hdl_.promise()).result();
	}

    /** co_await *****************************/
    struct awaitable {
        std::coroutine_handle<promise> coro_hdl_;

        awaitable(std::coroutine_handle<promise> coro_hdl) noexcept :
            coro_hdl_(coro_hdl) {}

        bool await_ready() const noexcept {
            return not coro_hdl_ or coro_hdl_.done();
        }
        auto await_suspend(std::coroutine_handle<> coro_hdl_next) noexcept
            -> std::coroutine_handle<> {
            coro_hdl_.promise().coro_hdl_next_ = coro_hdl_next;
            if constexpr (Lazy == exec::coro::lazy) {
                return coro_hdl_;
            } else {
                return std::noop_coroutine();
            }
        }
        decltype(auto) await_resume(this auto&& self) {
            return std::forward_like<decltype(self)>(self.coro_hdl_.promise()).result();
        }
    };

    auto operator co_await() const noexcept {
        return awaitable { coro_hdl_ };
    }
};
} // namespace exec
