export module exec:sender.adaptor;

import std;
import :support;

export namespace exec {
///////////////////////////////////////////
// exec::then(sender, func) -> sender
// sender | exec::then(func) -> sender
///////////////////////////////////////////
namespace detail {
template <exec::sender S, typename F>
struct then_sender {
    /** receiver *************************/
    template <typename R>
    struct receiver {
        static constexpr auto info = [] {
            using namespace constring_literals;
            return 
                "then_receiver<"_cs 
              + S::info + ", "_cs 
              + typeinfo<F> + ", "_cs 
              + R::info + ">"_cs;
        }();

        [[no_unique_address]] R rcvr_out_;
        [[no_unique_address]] F func_;

        template <typename... Ts>
            requires std::is_invocable_v<F, Ts...>
        void set_value(receiver&&, Ts&&... vs) 
            noexcept(std::is_nothrow_invocable_v<F, Ts...>) {
            try {
                if constexpr (std::same_as<void, std::invoke_result_t<F, Ts...>>) {
                    static_assert(receiver_of<R>);
                    std::invoke(std::move(func_), std::forward<Ts>(vs)...);
                    exec::set_value(std::move(rcvr_out_));
                } else {
                    static_assert(receiver_of<R, std::invoke_result_t<F, Ts...>>);
                    exec::set_value(
                        std::move(rcvr_out_),
                        std::invoke(std::move(func_), std::forward<Ts>(vs)...));
                }
            } catch (...) {
                exec::set_error(std::move(rcvr_out_), std::current_exception());
            }
        }
        template <typename E>
        void set_error(receiver&&, E&& e) noexcept {
            exec::set_error(std::move(rcvr_out_), std::forward<E>(e));
        }
        void set_done(receiver&&) noexcept {
            exec::set_done(std::move(rcvr_out_));
        }
    };

    /** sender ***************************/
    static constexpr auto info = [] {
        using namespace constring_literals;
        return "then_sender<"_cs + S::info + ", "_cs + typeinfo<F> + ">"_cs;
    }();

    template <typename... Args>
    using result_t_tl = type_list<filter_void_tl<std::invoke_result_t<F, Args...>>>;
    template<template<typename...> class Tuple, template<typename...> class Variant>
    using value_types = 
        zip_apply<
            typename S::template value_types<result_t_tl, type_set_of_tl_tl>, 
            Tuple, 
            Variant>;

    template<template<typename...> class Variant>
    using error_types = type_set_of_tl_tl<
        typename S::template error_types<type_list>,
        type_list<std::exception_ptr>
     >::template apply<Variant>;
    static const constexpr bool sends_done { S::sends_done };

    [[no_unique_address]] S sndr_in_;
    [[no_unique_address]] F func_;

    template <typename Self, exec::receiver R>
        requires std::same_as<std::remove_cvref_t<Self>, then_sender>
    auto connect(Self&&, R&& rcvr) {
        return exec::connect(
            std::forward_like<Self>(sndr_in_), 
            receiver<std::remove_cvref_t<R>>{
                std::forward<R>(rcvr),
                std::forward_like<Self>(func_)
            });
    }
};
} // namespace detail

/** then() & operator| *******************/
template <exec::sender S, typename F>
auto then(S&& sndr, F&& func) 
    -> detail::then_sender<std::remove_cvref_t<S>, std::decay_t<F>> {
    return { std::forward<S>(sndr), std::forward<F>(func) };
}

namespace detail {
template <typename F>
struct then_closure {
    F func_;

    template <exec::sender S>
    friend auto operator|(S&& sndr, then_closure&& closure_self)
        -> detail::then_sender<std::remove_cvref_t<S>, F> {
        return then(std::forward<S>(sndr), std::move(closure_self.func_));
    }
};
} // namespace detail

template <typename F>
auto then(F&& func) -> detail::then_closure<std::decay_t<F>> {
    return { std::forward<F>(func) };
}

///////////////////////////////////////////
// schedule_from
///////////////////////////////////////////
namespace detail { 
template <exec::scheduler Sch, exec::sender S>
struct schedule_from_sender {
    template <typename R>
    struct operation : detail::immovable {
        /** receiver *********************/
        struct receiver_before {
            static constexpr auto info = [] {
                using namespace constring_literals;
                return 
                    "schedule_from_receiver_before<"_cs 
                  + Sch::info + ", "_cs 
                  + S::info + ", "_cs 
                  + R::info + ">"_cs;
            }();

            operation& op_;

            template <typename... Ts>
            void set_value(receiver_before&&, Ts&&... vs) noexcept {
                try {
                    op_.value_.template emplace<std::tuple<Ts...>>(std::move(vs)...);
                    exec::start(op_.op_after_);
                } catch (...) {
                    exec::set_error(std::move(op_.rcvr_out_), std::current_exception());
                }
            }
            template <typename E>
            void set_error(receiver_before&&, E&& e) noexcept {
                exec::set_error(std::move(op_.rcvr_out_), std::forward<E>(e));
            }
            void set_done(receiver_before&&) noexcept {
                exec::set_done(std::move(op_.rcvr_out_));
            }
        };

        struct receiver_after {
            static constexpr auto info = [] {
                using namespace constring_literals;
                return "schedule_from_receiver_after<"_cs + Sch::info + ", "_cs + S::info + ", "_cs + R::info + ">"_cs;
            }();

            operation& op_;

            template <typename... Ts>
            void set_value(receiver_after&&) noexcept {
                try {
                    std::visit(
                        [&](auto&& tuple) {
                            std::apply(
                                [&](auto&&... args) {
                                    exec::set_value(op_.rcvr_out_, std::forward<decltype(args)>(args)...);
                                },
                                std::forward<decltype(tuple)>(tuple)
                            );
                        },
                        op_.value_
                    );
                } catch (...) {
                    exec::set_error(std::move(op_.rcvr_out_), std::current_exception());
                }
            }
            template <typename E>
            void set_error(receiver_after&&, E&& e) noexcept {
                exec::set_error(std::move(op_.rcvr_out_), std::forward<E>(e));
            }
            void set_done(receiver_after&&) noexcept {
                exec::set_done(std::move(op_.rcvr_out_));
            }
        };

        /** operation ********************/
        static constexpr auto info = [] {
            using namespace constring_literals;
            return 
                "schedule_from_operation<"_cs
              + typeinfo<Sch> + ", "_cs
              + typeinfo<S> + ", "_cs
              + typeinfo<R> + ">"_cs;
        }();

        using value_t = S::template value_types<std::tuple, std::variant>;
        [[no_unique_address]] value_t value_ {};
        static constexpr bool sends_done { S::sends_done };

        Sch sched_;
        R rcvr_out_;
        connect_result_t<S&&, receiver_before&&> op_before_;
        connect_result_t<schedule_result_t<Sch&>, receiver_after&&> op_after_;

        template <std::same_as<R> Rcvr>
            requires std::same_as<std::remove_cvref_t<Rcvr>, R>
        operation(Sch& sched, S&& sndr, Rcvr&& rcvr) :
            detail::immovable {},
            sched_ { sched },
            rcvr_out_ { std::move(rcvr) },
            op_before_ { exec::connect(std::move(sndr), receiver_before{*this}) },
            op_after_ { exec::connect(exec::schedule(sched_), receiver_after{*this}) } {}

        void start(operation&) noexcept {
            exec::start(op_before_);
        }
    };

    /** sender ***************************/
    static constexpr auto info = [] {
        using namespace constring_literals;
        return "schedule_from_sender<"_cs + Sch::info + ", "_cs + S::info + ">"_cs;
    }();

    template <template <typename...> class Tuple, template <typename...> class Variant>
    using value_types = typename S::template value_types<Tuple, Variant>;
    template <template <typename...> class Variant>
    using error_types = 
        typename type_set_of_tl_tl<
            typename S::template error_types<type_list>,
            type_list<std::exception_ptr>
        >::template apply<Variant>;
    static constexpr bool sends_done { S::sends_done };

    Sch sched_;
    S sndr_;

    template <exec::receiver R>
    auto connect(const schedule_from_sender&, R&& rcvr) 
        -> operation<std::remove_cvref_t<R>> {
        // TODO & && operation ctor
        return { sched_, std::move(sndr_), std::forward<R>(rcvr) };
    }
};
} // namespace detail

/** schedule_from() & operator| **********/
template <exec::scheduler Sch, exec::sender S>
auto schedule_from(Sch&& sched, S&& sender) 
    -> detail::schedule_from_sender<std::remove_cvref_t<Sch>, std::remove_cvref_t<S>> {
    return { std::forward<Sch>(sched), std::forward<S>(sender) };
}

namespace detail {
template <exec::scheduler Sch>
struct schedule_from_closure {
    Sch sched_;

    template <exec::sender S>
    friend auto operator|(S&& sndr, schedule_from_closure&& closure_self)
        -> detail::schedule_from_sender<Sch, std::remove_cvref_t<S>> {
        return schedule_from(std::move(closure_self.sched_), std::forward<S>(sndr));
    }
};
} // namespace detail

template <exec::scheduler Sch>
auto schedule_from(Sch&& sched)
    -> detail::schedule_from_closure<std::remove_cvref_t<Sch>> {
    return { std::forward<Sch>(sched) };
}
} // namespace exec

