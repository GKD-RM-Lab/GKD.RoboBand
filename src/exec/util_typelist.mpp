export module exec:util.typelist;

import std;

export namespace exec {
///////////////////////////////////////////
// type_list
///////////////////////////////////////////
/** type_list<t1, t2, ...>::apply<F> is equivalant to F<t1, t2, ...>.
 *  type_list<t1, t2, ...>::map<F> is equivalant to type_list<F<t1>, F<t2>, ...>. */
template <typename... Ts>
struct type_list {
    template <template <typename...> typename F>
    using apply = F<Ts...>;
    template <template <typename> typename F>
    using map = type_list<F<Ts>...>;
    template <typename T>
    static constexpr bool has = []() static {
        if constexpr (sizeof...(Ts)) {
            return (std::is_same_v<T, Ts> || ...);
        } else {
            return false;
        }
    }();
};
template <typename... Ts>
struct type_count {
    static constexpr int value = sizeof...(Ts);
};

///////////////////////////////////////////
// concat
///////////////////////////////////////////
template <typename... TLs>
struct concat;
template <>
struct concat<> {
    using type_list = type_list<>;
};
template <typename... Ts>
struct concat<type_list<Ts...>> {
    using type_list = type_list<Ts...>;
};
template <typename... Ts1, typename... Ts2, typename... Others>
struct concat<type_list<Ts1...>, type_list<Ts2...>, Others...> {
    using type_list = typename concat<type_list<Ts1..., Ts2...>, Others...>::type_list;
};

/** Used to concat multiple type_lists into a single type_list.
 *  concat_tl<type_list1<t11, t12...>, type_list2<t21, t22...>, ...>
 *  should return type_list<t11, t12, ..., t21, t22, ..., ...> */
template <typename... TLs>
using concat_tl = concat<TLs...>::type_list;

///////////////////////////////////////////
// type_set & type_set_of_tl
///////////////////////////////////////////
namespace detail {
template <typename... TLs>
struct type_set_impl;
template <>
struct type_set_impl<> {
    using type_list = type_list<>;
};
template <typename... Ts>
struct type_set_impl<type_list<Ts...>> {
    using type_list = type_list<Ts...>;
};
template <typename... Ts, typename... Us, typename... Others>
struct type_set_impl<type_list<Ts...>, type_list<Us...>, Others...> :
    type_set_impl<
        concat_tl<
            type_list<Ts...>,
            std::conditional_t<type_list<Ts...>::template has<Us>, type_list<>, type_list<Us>>...>,
        Others...> {};
} // namespace detail

template <typename... Ts>
struct type_set {
    using type_list = detail::type_set_impl<type_list<Ts>...>::type_list;
};

/** It creates a type_list containing unique types from input arguments.
 *  e.g. type_set_tl<int, float, int> becomes type_list<int, float> */
template <typename... Ts>
using type_set_tl = type_set<Ts...>::type_list;

template <typename... TLs>
struct type_set_of_tl {
    using type_list = concat_tl<TLs...>::template apply<type_set_tl>;
};
/** type_set_of_tl_tl<type_list<int>, type_list<void, int>, type_list<void>>
 *  is equivalant to type_list<int, void> */
template <typename... TLs>
using type_set_of_tl_tl = type_set_of_tl<TLs...>::type_list;

///////////////////////////////////////////
// filter_void
///////////////////////////////////////////
template <typename T>
struct filter_void {
    using type = std::conditional_t<std::is_void_v<T>, type_list<>, type_list<T>>;
};
template <typename T>
using filter_void_t = filter_void<T>::type;

///////////////////////////////////////////
// zip_apply
///////////////////////////////////////////
namespace detail {
template <template <typename...> typename Inner, template <typename...> typename Outer>
struct zip_apply_impl {
    template <typename... TLs>
    using apply = Outer<typename TLs::template apply<Inner>...>;
};
} // namespace detail

/** zip_apply<type_list<type_list<t11, t12>, type_list<t21, t22>>, std::variant, std::tuple>
 *  is equivalant to std::variant<std::tuple<t11, t12>, std::tuple<t21, t22>>*/
template <
    typename TL_TLs,
    template <typename...> typename Inner,
    template <typename...> typename Outer>
using zip_apply =
    typename TL_TLs::template apply<detail::zip_apply_impl<Inner, Outer>::template apply>;

} // namespace exec

