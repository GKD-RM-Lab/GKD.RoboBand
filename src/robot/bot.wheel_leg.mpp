export module robo:bot.wheel_leg;

import :spt;
import :ctrl.chassis.wheel_leg;

export namespace robo::bot {
template <dev::input In, typename WL>
struct WheelLegInfo {
    In input;
    WL wheel_leg;

    float forward_ratio { wheel_leg.limit.speed_set.max };
    float turning_ratio { wheel_leg.limit.yaw_speed_set.max };
    float roll_set_ratio { wheel_leg.limit.roll_set.max };
};

template <dev::input In, typename WL>
class WheelLeg final :
    public spt::immovable_base, 
    public spt::not_copyable_base,
    public WheelLegInfo<In, WL> {
private:
    using Info = WheelLegInfo<In, WL>;
    
    In::dev_type input { Info::input };
    WL::ctrl_type wheel_leg { Info::wheel_leg };

    bool emergency_stopped { false };

public:
    explicit WheelLeg(const Info& info) : 
        Info { info } {
        input.on_offline([this] {
            wheel_leg.setSpeed(0.0f);
            wheel_leg.setYawSpeed(0.0f);
            wheel_leg.setHeight(Info::wheel_leg.limit.height_set.min);
            wheel_leg.setRoll(0.0f);
        });
        input.on_update([this] {
            wheel_leg.setSpeed(input.vx() * this->forward_ratio);
            if constexpr (std::same_as<In, input::Gamepad::Info>) {
                if (input.button().bumper.left) {
                    emergency_stopped = true;
                }
                if (input.button().bumper.right) {
                    float height_min = Info::wheel_leg.limit.height_set.min;
                    float height_max = Info::wheel_leg.limit.height_set.max;
                    float height_mid = Info::wheel_leg.limit.height_set.mid;
                    float height_ratio = input.stick().right_y;
                    float height_set = (height_ratio > 0.0f) ? height_mid - (height_mid - height_min) * height_ratio : height_mid + (height_mid - height_max) * height_ratio;
                    wheel_leg.setYawSpeed((input.vx() > 0.0f ? -1.0f : 1.0f) * input.stick().left_x * this->turning_ratio);
                    wheel_leg.setHeight(height_set);
                    wheel_leg.setRoll(input.stick().right_x * this->roll_set_ratio);
                } else {
                    wheel_leg.setYawSpeed(input.wz() * this->turning_ratio);
                    wheel_leg.setHeight(Info::wheel_leg.limit.height_set.mid);
                    wheel_leg.setRoll(input.trigger().right * this->roll_set_ratio - input.trigger().left * this->roll_set_ratio);
                }
            }
            if (emergency_stopped) {
                wheel_leg.emergencyStop();
                return;
            }
        });
    }

    void run() {
        spt::task_context::start();
        wheel_leg.init();
        wheel_leg.run();
        task_context::wait_for(Info::wheel_leg.special.context);
    }
};
template <typename In, typename WL>
WheelLeg(WheelLegInfo<In, WL>) -> WheelLeg<In, WL>;
} // namespace robo::bot

