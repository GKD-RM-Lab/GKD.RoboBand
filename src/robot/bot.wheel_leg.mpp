export module robo:bot.wheel_leg;

import :spt;
import :ctrl.chassis.wheel_leg;

export namespace robo::bot {
template <dev::input In, typename WL>
struct WheelLegInfo {
    In input;
    WL wheel_leg;

    float forward_ratio;
    float turning_ratio;
};

template <dev::input In, typename WL>
class WheelLeg final :
    public spt::immovable_base, 
    public spt::not_copyable_base,
    public WheelLegInfo<In, WL> {
private:
    using Info = WheelLegInfo<In, WL>;
    
    In::dev_type input { Info::input };
    WL::ctrl_type wheel_leg { Info::wheel_leg };

public:
    explicit WheelLeg(const Info& info) : 
        Info { info } {
        input.on_offline([this] {
            wheel_leg.setSpeed(0.0f);
            wheel_leg.setYawErr(0.0f);
            wheel_leg.adjustHeight(0.0f);
        });
        input.on_update([this] {
            wheel_leg.setSpeed(input.vx() * this->forward_ratio);
            wheel_leg.setYawErr(input.wz() * this->turning_ratio);
            if constexpr (std::same_as<In, input::Gamepad::Info>) {
                // TODO Software button emergency stop protection
                wheel_leg.adjustHeight(0.0f);
            }
        });
    }

    void run() {
        spt::task_context::start();
        wheel_leg.init();
        wheel_leg.run();
        task_context::wait_for(Info::wheel_leg.context);
    }
};
template <typename In, typename WL>
WheelLeg(WheelLegInfo<In, WL>) -> WheelLeg<In, WL>;
} // namespace robo::bot

