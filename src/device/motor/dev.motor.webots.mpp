module;

#include <webots/motor.h>
#include <webots/position_sensor.h>
#include <webots/robot.h>

export module robo:dev.motor.webots;

import std;
import :dev.motor.base;
import :io;
import :spt;

export namespace robo::motor {
class Webots : public dev::Motor {
public:
    struct Info {
        using dev_type = Webots;

        std::string_view name;
        enum motor::dir dir;
    };

private:
    const Info info_;
    ::WbDeviceTag motor_tag_ { spt::webots(wb_robot_get_device, std::string{info_.name}.c_str()) };
    ::WbDeviceTag encoder_tag_ { spt::webots(wb_motor_get_position_sensor, motor_tag_) };
    float torque_max_ { static_cast<float>(spt::webots(wb_motor_get_max_torque, motor_tag_)) };
    float angle_last_ {};
    float angle_offset_ {};
    bool first_time { true };

public:
    explicit Webots(const Info& info) :
        Motor { std::chrono::nanoseconds::max() },
        info_ { info } {
        spt::webots(wb_position_sensor_enable, encoder_tag_, spt::webots.basic_time_step<int>());
        spt::task_context::webots::add_update_task([this] {
            float angle_temp = static_cast<float>(spt::webots(wb_position_sensor_get_value, encoder_tag_));
            angle_ = static_cast<float>(info_.dir) * angle_temp - angle_offset_;
            if (first_time) {
                speed_ = 0.0f;
                first_time = false;
            } else {
                speed_ = (angle_ - angle_last_) / (spt::webots.basic_time_step<float>() * 0.001f);
            }
            angle_last_ = angle_;
        });
    }

    float torque_max() const {
        return torque_max_;
    }
    void setTorque(float torque) {
        spt::webots(wb_motor_set_torque, motor_tag_, static_cast<double>(info_.dir) * static_cast<double>(math::abs_limited(torque, torque_max_)));
        torque_ = torque;
    }
    void setAngleOffset(float offset) {
        angle_offset_ = offset;
    }
    void setAngle(float current_angle) {
        angle_offset_ = angle_ - current_angle;
    }
};
static_assert(dev::motor<Webots::Info>);
} // namespace robo::motor

