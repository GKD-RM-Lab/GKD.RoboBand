export module robo:io.parser;

import std;
import :io.base;
import :spt.crc;
namespace stdr = std::ranges;

export namespace robo::io {
///////////////////////////////////////////
// concepts
//     keyed_parser : key_type /* hashable */ 
//                    get_key(bytes) -> key_type
//     bare_parser  : test() -> bool
///////////////////////////////////////////
template <typename T>
concept keyed_parser =
    requires() {
        { std::hash<typename T::key_type>{}(std::declval<typename T::key_type>()) }
            -> std::convertible_to<std::size_t>;
        { T::get_key(std::declval<std::span<const std::byte>>()) }
            -> std::same_as<std::optional<typename T::key_type>>;
        { T::desc() } -> std::same_as<std::string>;
    };
template <typename T>
concept bare_parser = 
    requires() {
        { T::test(std::declval<std::span<const std::byte>>()) }
            -> std::same_as<bool>;
    };

///////////////////////////////////////////
// implementation details (keyed_parser)
///////////////////////////////////////////
namespace detail {
template <io::keyed_parser P, io::bare_io Io>
class keyed_parser_impl {
public:
    struct Info : Io {
        using owner_type = keyed_parser_impl;
        auto desc() const {
            return std::format("{} (with parser {})", Io::desc(), P::desc());
        }
    };
    using info_type = Info;
    using parser_key_type = typename P::key_type;

private:
    const Info info_;
    std::unordered_map<parser_key_type, std::function<void(std::span<const std::byte>)>> callbacks_;

public:
    keyed_parser_impl(const Info& info) : info_ { info } {
        io::on_data(static_cast<const Io&>(info), 
                              [this](auto bytes) { this->callback(bytes); });      
    }

    [[nodiscard]]
    auto info() const -> const Info& { return info_; };
    void on_data(parser_key_type key, io::callback auto&& func) {
        auto [_, success] = callbacks_.emplace(key, std::forward<decltype(func)>(func));
        if (not success) {
            throw std::logic_error{ 
                "repeatedly register callback with a same key to " + info_.desc()
            };
        }
    }

private:
    void callback(auto rx_bytes) {
        auto ret = P::get_key(rx_bytes);
        if (not ret.has_value() or not callbacks_.contains(ret.value())) {
            io::error_handler(static_cast<const Io&>(info_), io::error::invalid_data);
            return;
        }
        callbacks_[ret.value()](rx_bytes);
    }
};
} // namespace detail

///////////////////////////////////////////
// with_parser
//     io::with_parser<bare_parser...>::on_data(...)
//     io::with_parser<keyed_parser>::on_data(...)
//     io::with_parser<keyed_parser, bare_parser...>::on_data(...)
///////////////////////////////////////////
template <typename...>
struct with_parser;
template <io::bare_parser... Ps> requires (sizeof...(Ps) > 0)
struct with_parser<Ps...> {
    static void on_data(io::io auto&& info, io::callback auto&& func) {
        io::on_data(info, [&info, func = std::forward<decltype(func)>(func)](auto bytes) { 
            if ((Ps::test(bytes) and ...)) {
                func(bytes);
            } else {
                io::error_handler(info, io::error::invalid_data);
            }
        });
    }
};
template <io::keyed_parser P>
struct with_parser<P> {
    static void on_data(io::bare_io auto&& io, auto key, io::callback auto&& func) {
        using io_type = std::remove_cvref_t<decltype(io)>;
        using parser_type = typename detail::keyed_parser_impl<P, io_type>::info_type;
        spt::multiton::get(static_cast<const parser_type&>(io))
            .on_data(key, std::forward<decltype(func)>(func));
    }
};
template <io::keyed_parser P, io::bare_parser... Ps> requires (sizeof...(Ps) > 0)
struct with_parser<P, Ps...> {
    static void on_data(io::bare_io auto&& io, auto key, io::callback auto&& func) {
        io::with_parser<P>::on_data(io, key, 
                                    [&io, func = std::forward<decltype(func)>(func)](auto bytes) { 
            if ((Ps::test(bytes) and ...)) {
                func(bytes);
            } else {
                io::error_handler(io, io::error::invalid_data);
            }
        });
    }
};

///////////////////////////////////////////
// parsers
///////////////////////////////////////////
template <std::size_t N = 1> requires (N > 0)
struct prefix {
    using key_type = std::array<std::byte, N>;
    static auto get_key(std::span<const std::byte> bytes) -> std::optional<key_type> {
        if (bytes.size() <= N) return std::nullopt;
        key_type key;
        stdr::copy(bytes.first<N>(), key.begin());
        return { key };
    }
    static constexpr auto desc() { 
        return std::format("prefix_key<{}>", N);
    }
};

template <>
struct prefix<1> {
    using key_type = std::byte;
    static auto get_key(std::span<const std::byte> bytes) -> std::optional<key_type> {
        if (bytes.size() <= 1) return std::nullopt;
        return { bytes[0] };
    }
    static constexpr auto desc() -> std::string { return "prefix_key<1>"; }
};

template <auto... Args> requires (sizeof...(Args) > 0)
struct head {
    static bool test(std::span<const std::byte> bytes) {
        static constexpr std::size_t N = sizeof...(Args);
        return (bytes.size() > N) and stdr::equal(std::array{std::byte{Args}...}, bytes.first(N));
    }
};

template <auto... Args> requires (sizeof...(Args) > 0)
struct tail {
    static bool test(std::span<const std::byte> bytes) {
        static constexpr std::size_t N = sizeof...(Args);
        return (bytes.size() > N) and stdr::equal(std::array{std::byte{Args}...}, bytes.last(N));
    }
};

template <std::size_t N> requires (N > 0)
struct length {
    static bool test(std::span<const std::byte> bytes) {
        return bytes.size() == N;
    }
};

template <spt::crc::algo auto Param, std::size_t First = 0, std::size_t Last = 0>
struct crc {
    static bool test(std::span<const std::byte> bytes) {
        static constexpr std::size_t crc_bytes_num { Param.calc_width / 8 };
        if (bytes.size() - First - Last <= crc_bytes_num) return false;

        const auto last_offset = static_cast<std::ptrdiff_t>(bytes.size() - Last - crc_bytes_num);
        const auto ret = spt::crc::calc<Param>(bytes.begin() + First, 
                                               bytes.begin() + last_offset);
        if (ret == *reinterpret_cast<decltype(ret)*>(bytes.data() + last_offset)) {
            return true;
        } else {
            return false;
        }
    }
};
} // namespace robo::io

///////////////////////////////////////////
// custom hash
///////////////////////////////////////////
template<std::size_t N> requires (N > 1)
struct std::hash<std::array<std::byte, N>>
{
    std::size_t operator()(const std::array<std::byte, N>& bytes) const noexcept
    {
        std::string_view s { std::bit_cast<char*>(bytes.data()), N };
        return std::hash<std::string_view>{}(s);
    }
};

