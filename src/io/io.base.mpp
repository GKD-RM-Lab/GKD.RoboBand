module;

#include <unistd.h>
#include <cerrno>
#include <sys/poll.h>

export module robo:io.base;

import std;
import :spt.multiton;

export namespace robo::io {
///////////////////////////////////////////
// enums
///////////////////////////////////////////
enum class state {
    offline,
    error,
    working,
};

enum class error {
    offline,
    invalid_data,
    callback_unregistered,
    read_failed,
    write_failed,
};

///////////////////////////////////////////
// core functions
///////////////////////////////////////////
[[nodiscard]]
decltype(auto) get(auto&& io) {
    return spt::multiton::get(io);
}
auto get_state(auto&& io) {
    return io::get(io).state();
}
void send(auto&& io, auto&&... args) {
    io::get(io).send(std::forward<decltype(args)>(args)...);
}
void on_data(auto&& io, auto&&... args) {
    io::get(io).on_data(std::forward<decltype(args)>(args)...);
}
void on_error(auto&& io, auto&&... args) {
    io::get(io).on_error(std::forward<decltype(args)>(args)...);
}
void error_handler(auto&& io, const io::error err) {
    io::get(io).error_handler(io, err);
}

///////////////////////////////////////////
// concepts
//     io_base  : info
//                io::get(info) -> impl
//                io::error_handler(io, const io::error)
//                io::on_error(io, error_handler)
//     bare_io  : io_base
//                io::on_data(io, callback)
//     keyed_io : io_base
//                io::on_data(io, key, callback)
//     io       : bare_io or keyed_io
//     /* `callback(std::span<const std::byte>)` */
//     /* `error_handler(io, const io::error)` */
///////////////////////////////////////////
template <typename T>
concept io_base =
    spt::info<std::remove_cvref_t<T>> and
    requires(std::remove_cvref_t<T> io) {
        { io::get(io) };
        { io::get_state(io) } -> std::same_as<io::state>;
        { io::on_error(io, [](const T&, const io::error) {}) }
            -> std::same_as<void>;
        { io::error_handler(io, std::declval<const io::error>()) }
            -> std::same_as<void>;
    };
template <typename T>
concept bare_io =
    io_base<T> and
    requires(std::remove_cvref_t<T> io) {
        { io::on_data(io, [](std::span<const std::byte>) {}) }
            -> std::same_as<void>;
    };
template <typename T>
concept keyed_io =
    io_base<T> and
    requires(std::remove_cvref_t<T> io) {
        { io::on_data(io, 
                      std::declval<typename T::owner_type::io_key_type>(), 
                      [](std::span<const std::byte>) {}) }
            -> std::same_as<void>;
    };
template <typename T>
concept io =
    bare_io<T> or 
    keyed_io<T>;

template <typename T>
concept callback = 
    spt::invocable_r<T, void, std::span<const std::byte>>;
template <typename T, typename Io>
concept error_handler_of = 
    spt::invocable_r<T, void, const Io&,  const io::error>;

///////////////////////////////////////////
// helpers
///////////////////////////////////////////
namespace detail {
struct default_error_handler_impl {
    static void operator()(auto&& io, const io::error err) {
        switch (err) {
            using enum io::error;
            case error::offline:
                break;
            case error::invalid_data:
                break;
            case error::callback_unregistered:
                throw std::logic_error{
                    "no callback registered to " + io.desc()
                };
            case error::read_failed:
                throw std::system_error { errno, std::system_category(), 
                    "read failed on " + io.desc()
                };
            case error::write_failed:
                throw std::system_error { errno, std::system_category(), 
                    "write failed on " + io.desc()
                };
        }
    }
};
struct allow_no_callback_impl {
    static void operator()(auto&& io, const io::error err) {
        if (err != robo::io::error::callback_unregistered) {
            default_error_handler_impl{}(io, err);
        }
    };
};
} // namespace detail
constexpr detail::default_error_handler_impl default_error_handler;
constexpr detail::allow_no_callback_impl allow_no_callback;

class Fd {
private:
    static constexpr int empty_fd { -1 };
    int fd_ { empty_fd };

public:
    Fd() = default;
    explicit Fd(int fd)
        : fd_{ fd } {}
    ~Fd() {
        close();
    }

    Fd(Fd &&other) noexcept
        : fd_{ std::exchange(other.fd_, empty_fd) } {}
    Fd& operator=(Fd &&other) noexcept {
        close();
        fd_ = std::exchange(other.fd_, empty_fd);
        return *this;
    }

    Fd(const Fd &other) noexcept = delete;
    Fd& operator=(const Fd &other) noexcept = delete;

    [[nodiscard]]
    bool is_valid() const { return fd_ >= 0; }
    [[nodiscard]]
    auto get() const -> const int& { return fd_; }
    [[nodiscard]]
    operator int() const { return fd_; }

    void close() {
        if (not is_valid()) return;
        int fd_temp = std::exchange(fd_, empty_fd);
        auto ret = ::close(fd_temp);
        if (ret != 0) {
            throw std::system_error{ errno, std::system_category(),
                std::format("close fd {} failed", fd_)
            };
        }
    }

    pollfd make_pollfd(short events = 0) {
        return { fd_, events, 0 };
    }
};
} // namespace robo::io

